
// Verilog netlist produced by program backanno, Version Radiant Software (64-bit) 3.2.0.18.0

// backanno -o latticeE155FinalProject_impl_1_vo.vo -sp High-Performance_1.2V -w -neg -gui latticeE155FinalProject_impl_1.udb 
// Netlist created on Tue Dec  6 23:45:14 2022
// Netlist written on Tue Dec  6 23:45:23 2022
// Design is for device iCE40UP5K
// Design is for package SG48
// Design is for performance grade High-Performance_1.2V

`timescale 1 ns / 1 ps

module top ( ce, sdi, sck, makingMusic, pwm, clk );
  input  ce, sdi, sck, clk;
  output makingMusic, pwm;
  wire   \tuner.pitch.n133[0] , \tuner.pitch.n5501 , \tuner.pitch.counter[0] , 
         VCC_net, \tuner.pitch.counter_31__N_333 , int_osc, 
         \tuner.pitch.n3483 , \tuner.pitch.n133[6] , \tuner.pitch.n133[5] , 
         \tuner.pitch.n5561 , \tuner.pitch.counter[6] , \tuner.pitch.n3487 , 
         \tuner.pitch.counter[5] , \tuner.pitch.n3489 , \tuner.pitch.n133[4] , 
         \tuner.pitch.n133[3] , \tuner.pitch.n5558 , \tuner.pitch.counter[4] , 
         \tuner.pitch.n3485 , \tuner.pitch.counter[3] , \tuner.pitch.n133[2] , 
         \tuner.pitch.n133[1] , \tuner.pitch.n5555 , \tuner.pitch.counter[2] , 
         \tuner.pitch.counter[1] , \tuner.pitch.n133[31] , \tuner.pitch.n5600 , 
         \tuner.pitch.n3513 , \tuner.pitch.counter[31] , 
         \tuner.pitch.n133[30] , \tuner.pitch.n133[29] , \tuner.pitch.n5597 , 
         \tuner.pitch.counter[30] , \tuner.pitch.n3511 , 
         \tuner.pitch.counter[29] , \tuner.pitch.n133[28] , 
         \tuner.pitch.n133[27] , \tuner.pitch.n5594 , 
         \tuner.pitch.counter[28] , \tuner.pitch.n3509 , 
         \tuner.pitch.counter[27] , \tuner.pitch.n133[26] , 
         \tuner.pitch.n133[25] , \tuner.pitch.n5591 , 
         \tuner.pitch.counter[26] , \tuner.pitch.n3507 , 
         \tuner.pitch.counter[25] , \tuner.pitch.n133[24] , 
         \tuner.pitch.n133[23] , \tuner.pitch.n5588 , 
         \tuner.pitch.counter[24] , \tuner.pitch.n3505 , 
         \tuner.pitch.counter[23] , \tuner.pitch.n133[22] , 
         \tuner.pitch.n133[21] , \tuner.pitch.n5585 , 
         \tuner.pitch.counter[22] , \tuner.pitch.n3503 , 
         \tuner.pitch.counter[21] , \tuner.pitch.n133[20] , 
         \tuner.pitch.n133[19] , \tuner.pitch.n5582 , 
         \tuner.pitch.counter[20] , \tuner.pitch.n3501 , 
         \tuner.pitch.counter[19] , \tuner.pitch.n133[18] , 
         \tuner.pitch.n133[17] , \tuner.pitch.n5579 , 
         \tuner.pitch.counter[18] , \tuner.pitch.n3499 , 
         \tuner.pitch.counter[17] , \tuner.pitch.n133[16] , 
         \tuner.pitch.n133[15] , \tuner.pitch.n5576 , 
         \tuner.pitch.counter[16] , \tuner.pitch.n3497 , 
         \tuner.pitch.counter[15] , \tuner.pitch.n133[14] , 
         \tuner.pitch.n133[13] , \tuner.pitch.n5573 , 
         \tuner.pitch.counter[14] , \tuner.pitch.n3495 , 
         \tuner.pitch.counter[13] , \tuner.pitch.n133[12] , 
         \tuner.pitch.n133[11] , \tuner.pitch.n5570 , 
         \tuner.pitch.counter[12] , \tuner.pitch.n3493 , 
         \tuner.pitch.counter[11] , \tuner.pitch.n133[10] , 
         \tuner.pitch.n133[9] , \tuner.pitch.n5567 , \tuner.pitch.counter[10] , 
         \tuner.pitch.n3491 , \tuner.pitch.counter[9] , \tuner.pitch.n133[8] , 
         \tuner.pitch.n133[7] , \tuner.pitch.n5564 , \tuner.pitch.counter[8] , 
         \tuner.pitch.counter[7] , \tuner.howLong.n133[31] , 
         \tuner.howLong.n5552 , \tuner.howLong.n3546 , 
         \tuner.howLong.counter[31] , \tuner.howLong.counter_31__N_268 , 
         \tuner.howLong.n133[30] , \tuner.howLong.n133[29] , 
         \tuner.howLong.n5549 , \tuner.howLong.counter[30] , 
         \tuner.howLong.n3544 , \tuner.howLong.counter[29] , 
         \tuner.howLong.n133[28] , \tuner.howLong.n133[27] , 
         \tuner.howLong.n5546 , \tuner.howLong.counter[28] , 
         \tuner.howLong.n3542 , \tuner.howLong.counter[27] , 
         \tuner.howLong.n133[26] , \tuner.howLong.n133[25] , 
         \tuner.howLong.n5543 , \tuner.howLong.counter[26] , 
         \tuner.howLong.n3540 , \tuner.howLong.counter[25] , 
         \tuner.howLong.n133[24] , \tuner.howLong.n133[23] , 
         \tuner.howLong.n5540 , \tuner.howLong.counter[24] , 
         \tuner.howLong.n3538 , \tuner.howLong.counter[23] , 
         \tuner.howLong.n133[22] , \tuner.howLong.n133[21] , 
         \tuner.howLong.n5537 , \tuner.howLong.counter[22] , 
         \tuner.howLong.n3536 , \tuner.howLong.counter[21] , 
         \tuner.howLong.n133[20] , \tuner.howLong.n133[19] , 
         \tuner.howLong.n5534 , \tuner.howLong.counter[20] , 
         \tuner.howLong.n3534 , \tuner.howLong.counter[19] , 
         \tuner.howLong.n133[18] , \tuner.howLong.n133[17] , 
         \tuner.howLong.n5531 , \tuner.howLong.counter[18] , 
         \tuner.howLong.n3532 , \tuner.howLong.counter[17] , 
         \tuner.howLong.n133[16] , \tuner.howLong.n133[15] , 
         \tuner.howLong.n5528 , \tuner.howLong.counter[16] , 
         \tuner.howLong.n3530 , \tuner.howLong.counter[15] , 
         \tuner.howLong.n133[14] , \tuner.howLong.n133[13] , 
         \tuner.howLong.n5525 , \tuner.howLong.counter[14] , 
         \tuner.howLong.n3528 , \tuner.howLong.counter[13] , 
         \tuner.howLong.n133[12] , \tuner.howLong.n133[11] , 
         \tuner.howLong.n5522 , \tuner.howLong.counter[12] , 
         \tuner.howLong.n3526 , \tuner.howLong.counter[11] , 
         \tuner.howLong.n133[10] , \tuner.howLong.n133[9] , 
         \tuner.howLong.n5519 , \tuner.howLong.counter[10] , 
         \tuner.howLong.n3524 , \tuner.howLong.counter[9] , 
         \tuner.howLong.n133[8] , \tuner.howLong.n133[7] , 
         \tuner.howLong.n5516 , \tuner.howLong.counter[8] , 
         \tuner.howLong.n3522 , \tuner.howLong.counter[7] , 
         \tuner.howLong.n133[6] , \tuner.howLong.n133[5] , 
         \tuner.howLong.n5513 , \tuner.howLong.counter[6] , 
         \tuner.howLong.n3520 , \tuner.howLong.counter[5] , 
         \tuner.howLong.n133[4] , \tuner.howLong.n133[3] , 
         \tuner.howLong.n5510 , \tuner.howLong.counter[4] , 
         \tuner.howLong.n3518 , \tuner.howLong.counter[3] , 
         \tuner.howLong.n133[2] , \tuner.howLong.n133[1] , 
         \tuner.howLong.n5507 , \tuner.howLong.counter[2] , 
         \tuner.howLong.n3516 , \tuner.howLong.counter[1] , 
         \tuner.howLong.n133[0] , \tuner.howLong.n5504 , 
         \tuner.howLong.counter[0] , \tuner.n9[0] , n8, \tuner.counter[0] , 
         \tuner.nextstate_5__N_116 , \tuner.n675[1] , \tuner.n675[0] , n11, 
         \state[2] , \freqThreshold3[1] , \tuner.n836[1] , \freqThreshold3[0] , 
         \tuner.n836[0] , n2480, \tuner.freqThreshold[0] , 
         \tuner.freqThreshold[1] , \tuner.n675[14] , \tuner.n675[15] , 
         \freqThreshold3[14] , \tuner.n836[14] , n10, n3138, 
         \tuner.freqThreshold[15] , \tuner.freqThreshold[14] , 
         \tuner.n675[12] , \tuner.n675[13] , \freqThreshold3[12] , 
         \tuner.n836[12] , \tuner.n836[13] , \freqThreshold3[13] , 
         \tuner.freqThreshold[13] , \tuner.freqThreshold[12] , 
         \tuner.n675[10] , \tuner.n675[11] , \freqThreshold3[10] , 
         \tuner.n836[10] , \freqThreshold3[11] , \tuner.n836[11] , 
         \tuner.freqThreshold[11] , \tuner.freqThreshold[10] , \tuner.n675[8] , 
         \tuner.n675[9] , \freqThreshold3[8] , \tuner.n836[8] , 
         \freqThreshold3[9] , \tuner.n836[9] , \tuner.freqThreshold[9] , 
         \tuner.freqThreshold[8] , \tuner.n675[6] , \tuner.n675[7] , 
         \freqThreshold3[6] , \tuner.n836[6] , \freqThreshold3[7] , 
         \tuner.n836[7] , \tuner.freqThreshold[7] , \tuner.freqThreshold[6] , 
         \tuner.n675[4] , \tuner.n675[5] , n3128, \tuner.n836[4] , 
         \freqThreshold3[5] , \tuner.n836[5] , \tuner.freqThreshold[5] , 
         \tuner.freqThreshold[4] , \tuner.n675[2] , \tuner.n675[3] , 
         \freqThreshold3[2] , \tuner.n836[2] , \freqThreshold3[3] , 
         \tuner.n836[3] , \tuner.freqThreshold[3] , \tuner.freqThreshold[2] , 
         n2496, n2497, \durThreshold[8] , n1019, n1024, \durThreshold[7] , 
         n2494, n2495, \durThreshold[11] , \durThreshold[9] , n1018, n2492, 
         n2493, \durThreshold[13] , n1015, \durThreshold[12] , n2490, n2491, 
         \durThreshold[16] , \durThreshold[15] , n2488, n2489, 
         \durThreshold[20] , \durThreshold[17] , \state[0] , \state[1] , n2486, 
         n2487, \durThreshold[22] , \durThreshold[21] , n2484, 
         \durThreshold[24] , \tuner.n1007[18] , \tuner.n1007[19] , 
         \durThresh3[15] , \tuner.n1168[18] , \durThresh3[19] , 
         \tuner.n1168[19] , \tuner.durThreshold[19] , \tuner.durThreshold[18] , 
         \tuner.pitch.pwm_N_337 , \tuner.pitch.n30 , \tuner.pitch.n29 , 
         \tuner.pitch.n3767 , pwm_c, 
         \newFlattenedMCUout[39].sig_033.FeedThruLUT , 
         \newFlattenedMCUout[38].sig_000.FeedThruLUT , 
         \newFlattenedMCUout[39] , \newFlattenedMCUout[38] , n2476, ce_c, 
         \flattenedMCUout[38] , \flattenedMCUout[39] , 
         \newFlattenedMCUout[36].sig_002.FeedThruLUT , 
         \newFlattenedMCUout[37].sig_001.FeedThruLUT , 
         \newFlattenedMCUout[36] , \newFlattenedMCUout[37] , 
         \flattenedMCUout[37] , \flattenedMCUout[36] , 
         \newFlattenedMCUout[34].sig_004.FeedThruLUT , 
         \newFlattenedMCUout[35].sig_003.FeedThruLUT , 
         \newFlattenedMCUout[34] , \newFlattenedMCUout[35] , 
         \enabler.flattenedMCUout[35] , \enabler.flattenedMCUout[34] , 
         \newFlattenedMCUout[32].sig_006.FeedThruLUT , 
         \newFlattenedMCUout[33].sig_005.FeedThruLUT , 
         \newFlattenedMCUout[32] , \newFlattenedMCUout[33] , 
         \enabler.flattenedMCUout[33] , \enabler.flattenedMCUout[32] , 
         \newFlattenedMCUout[30].sig_008.FeedThruLUT , 
         \newFlattenedMCUout[31].sig_007.FeedThruLUT , 
         \newFlattenedMCUout[30] , \newFlattenedMCUout[31] , 
         \flattenedMCUout[31] , \flattenedMCUout[30] , 
         \newFlattenedMCUout[28].sig_010.FeedThruLUT , 
         \newFlattenedMCUout[29].sig_009.FeedThruLUT , 
         \newFlattenedMCUout[28] , \newFlattenedMCUout[29] , 
         \flattenedMCUout[29] , \flattenedMCUout[28] , 
         \newFlattenedMCUout[26].sig_012.FeedThruLUT , 
         \newFlattenedMCUout[27].sig_011.FeedThruLUT , 
         \newFlattenedMCUout[26] , \newFlattenedMCUout[27] , 
         \flattenedMCUout[27] , \flattenedMCUout[26] , 
         \newFlattenedMCUout[24].sig_014.FeedThruLUT , 
         \newFlattenedMCUout[25].sig_013.FeedThruLUT , 
         \newFlattenedMCUout[24] , \newFlattenedMCUout[25] , 
         \flattenedMCUout[25] , \flattenedMCUout[24] , 
         \newFlattenedMCUout[22].sig_016.FeedThruLUT , 
         \newFlattenedMCUout[23].sig_015.FeedThruLUT , 
         \newFlattenedMCUout[22] , \newFlattenedMCUout[23] , 
         \flattenedMCUout[23] , \flattenedMCUout[22] , 
         \newFlattenedMCUout[20].sig_018.FeedThruLUT , 
         \newFlattenedMCUout[21].sig_017.FeedThruLUT , 
         \newFlattenedMCUout[20] , \newFlattenedMCUout[21] , 
         \flattenedMCUout[21] , \flattenedMCUout[20] , 
         \newFlattenedMCUout[18].sig_020.FeedThruLUT , 
         \newFlattenedMCUout[19].sig_019.FeedThruLUT , 
         \newFlattenedMCUout[18] , \newFlattenedMCUout[19] , 
         \flattenedMCUout[19] , \flattenedMCUout[18] , 
         \newFlattenedMCUout[16].sig_022.FeedThruLUT , 
         \newFlattenedMCUout[17].sig_021.FeedThruLUT , 
         \newFlattenedMCUout[16] , \newFlattenedMCUout[17] , 
         \flattenedMCUout[17] , \flattenedMCUout[16] , 
         \newFlattenedMCUout[14].sig_024.FeedThruLUT , 
         \newFlattenedMCUout[15].sig_023.FeedThruLUT , 
         \newFlattenedMCUout[14] , \newFlattenedMCUout[15] , 
         \flattenedMCUout[15] , \flattenedMCUout[14] , 
         \newFlattenedMCUout[12].sig_026.FeedThruLUT , 
         \newFlattenedMCUout[13].sig_025.FeedThruLUT , 
         \newFlattenedMCUout[12] , \newFlattenedMCUout[13] , 
         \flattenedMCUout[13] , \flattenedMCUout[12] , 
         \newFlattenedMCUout[10].sig_028.FeedThruLUT , 
         \newFlattenedMCUout[11].sig_027.FeedThruLUT , 
         \newFlattenedMCUout[10] , \newFlattenedMCUout[11] , 
         \flattenedMCUout[11] , \flattenedMCUout[10] , 
         \newFlattenedMCUout[8].sig_030.FeedThruLUT , 
         \newFlattenedMCUout[9].sig_029.FeedThruLUT , \newFlattenedMCUout[8] , 
         \newFlattenedMCUout[9] , \flattenedMCUout[9] , \flattenedMCUout[8] , 
         \newFlattenedMCUout[0].sig_032.FeedThruLUT , 
         \newFlattenedMCUout[1].sig_031.FeedThruLUT , \newFlattenedMCUout[0] , 
         \newFlattenedMCUout[1] , \flattenedMCUout[1] , \flattenedMCUout[0] , 
         \newFlattenedMCUout[38].sig_034.FeedThruLUT , sck_c, 
         \newFlattenedMCUout[36].sig_036.FeedThruLUT , 
         \newFlattenedMCUout[37].sig_035.FeedThruLUT , 
         \newFlattenedMCUout[34].sig_038.FeedThruLUT , 
         \newFlattenedMCUout[35].sig_037.FeedThruLUT , 
         \newFlattenedMCUout[32].sig_040.FeedThruLUT , 
         \newFlattenedMCUout[33].sig_039.FeedThruLUT , 
         \newFlattenedMCUout[30].sig_042.FeedThruLUT , 
         \newFlattenedMCUout[31].sig_041.FeedThruLUT , 
         \newFlattenedMCUout[28].sig_044.FeedThruLUT , 
         \newFlattenedMCUout[29].sig_043.FeedThruLUT , 
         \newFlattenedMCUout[26].sig_046.FeedThruLUT , 
         \newFlattenedMCUout[27].sig_045.FeedThruLUT , 
         \newFlattenedMCUout[24].sig_048.FeedThruLUT , 
         \newFlattenedMCUout[25].sig_047.FeedThruLUT , 
         \newFlattenedMCUout[22].sig_050.FeedThruLUT , 
         \newFlattenedMCUout[23].sig_049.FeedThruLUT , 
         \newFlattenedMCUout[20].sig_052.FeedThruLUT , 
         \newFlattenedMCUout[21].sig_051.FeedThruLUT , 
         \newFlattenedMCUout[18].sig_054.FeedThruLUT , 
         \newFlattenedMCUout[19].sig_053.FeedThruLUT , 
         \newFlattenedMCUout[16].sig_056.FeedThruLUT , 
         \newFlattenedMCUout[17].sig_055.FeedThruLUT , 
         \newFlattenedMCUout[14].sig_058.FeedThruLUT , 
         \newFlattenedMCUout[15].sig_057.FeedThruLUT , 
         \newFlattenedMCUout[12].sig_060.FeedThruLUT , 
         \newFlattenedMCUout[13].sig_059.FeedThruLUT , 
         \newFlattenedMCUout[10].sig_062.FeedThruLUT , 
         \newFlattenedMCUout[11].sig_061.FeedThruLUT , 
         \newFlattenedMCUout[8].sig_064.FeedThruLUT , 
         \newFlattenedMCUout[9].sig_063.FeedThruLUT , 
         \newFlattenedMCUout[0].sig_072.FeedThruLUT , 
         \spi.newFlattenedMCUout[7]_2.sig_065.FeedThruLUT , 
         \spi.newFlattenedMCUout[7]_2 , 
         \newFlattenedMCUout[1].sig_071.FeedThruLUT , 
         \spi.newFlattenedMCUout[6]_2.sig_066.FeedThruLUT , 
         \spi.newFlattenedMCUout[6]_2 , \spi.newFlattenedMCUout[2]_2 , 
         \spi.newFlattenedMCUout[4]_2.sig_068.FeedThruLUT , 
         \spi.newFlattenedMCUout[5]_2.sig_067.FeedThruLUT , 
         \spi.newFlattenedMCUout[4]_2 , \spi.newFlattenedMCUout[5]_2 , 
         \spi.newFlattenedMCUout[2]_2.sig_070.FeedThruLUT , 
         \spi.newFlattenedMCUout[3]_2.sig_069.FeedThruLUT , 
         \spi.newFlattenedMCUout[3]_2 , \tuner.n2 , \freqThreshold0[14] , 
         \freqThreshold2[14] , \freqThreshold1[14] , \tuner.n2_adj_340 , 
         \freqThreshold0[0] , \freqThreshold2[0] , \freqThreshold1[0] , n83, 
         \tuner.n3162 , \durThresh2[15] , \durThresh1[15] , \tuner.n1168[15] , 
         \tuner.n2_adj_341 , \tuner.n4653 , \durThresh2[19] , \durThresh1[19] , 
         \tuner.n1168[24] , \durThresh3[20] , n3160, n7_adj_355, n3078, 
         \durThresh1[20] , \enabler.n2658 , n1179, \tuner.n2_adj_343 , 
         \freqThreshold0[1] , \freqThreshold2[1] , \freqThreshold1[1] , 
         \tuner.n2_adj_344 , \freqThreshold0[2] , \freqThreshold2[2] , 
         \freqThreshold1[2] , \tuner.n2_adj_345 , \freqThreshold0[3] , 
         \freqThreshold2[3] , \freqThreshold1[3] , \tuner.n3158 , n3152, n3116, 
         n3122, \tuner.n2_adj_346 , \freqThreshold0[5] , \freqThreshold2[5] , 
         \freqThreshold1[5] , \tuner.n2_adj_347 , \freqThreshold0[6] , 
         \freqThreshold2[6] , \freqThreshold1[6] , \tuner.n2_adj_348 , n4643, 
         \freqThreshold2[7] , \freqThreshold1[7] , \tuner.n2_adj_349 , 
         \freqThreshold0[8] , \freqThreshold2[8] , \freqThreshold1[8] , 
         \tuner.n2_adj_350 , \freqThreshold0[9] , \freqThreshold1[9] , 
         \freqThreshold2[9] , \tuner.n2_adj_351 , \freqThreshold0[10] , 
         \freqThreshold2[10] , \freqThreshold1[10] , \tuner.n2_adj_352 , 
         \freqThreshold0[11] , \freqThreshold2[11] , \freqThreshold1[11] , 
         \tuner.n2_adj_353 , \freqThreshold0[12] , \freqThreshold2[12] , 
         \freqThreshold1[12] , \tuner.n2_adj_354 , n4636, \freqThreshold2[13] , 
         \freqThreshold1[13] , \enabler.n22 , \enabler.n63 , \enabler.n4610 , 
         n3108, \enabler.n2642 , \durThresh1[23] , \durThresh2[23] , 
         \enabler.n2641 , n1177, \enabler.n3154 , n1180, \tuner.pitch.n24 , 
         \tuner.pitch.n23 , \tuner.pitch.n21 , \tuner.pitch.n22 , 
         \tuner.pitch.n28 , \tuner.pitch.n27 , \tuner.pitch.n25 , 
         \tuner.pitch.n26 , \tuner.pitch.n17 , \tuner.pitch.n20 , 
         \tuner.pitch.n18 , \tuner.pitch.n19 , \tuner.howLong.n18 , 
         \tuner.howLong.n25 , \tuner.howLong.n30 , \tuner.howLong.n22 , 
         \tuner.howLong.n20 , \tuner.howLong.n19 , \tuner.howLong.n21 , 
         \tuner.howLong.n31 , \tuner.howLong.n24 , \tuner.howLong.n27 , 
         \tuner.howLong.n3764 , \tuner.howLong.n25_adj_339 , 
         \tuner.howLong.n26 , \tuner.howLong.n23 , \tuner.howLong.n24_adj_338 , 
         \durThresh3[23] , \tuner.nextstate[2] , \tuner.n4686 , \tuner.done , 
         \tuner.rep , \tuner.nextstate[0] , \tuner.n530[1] , \tuner.n2464 , 
         n4049, stopCountFlag, n7, \tuner.en , \tuner.nextstate_5__N_196 , 
         n4191, makingMusic_c, \tuner.n520[1] , \tuner.counter[1] , 
         \tuner.n1007[23] , \tuner.durThreshold[23] , 
         \tuner.howLong.counter_31__N_268$n0 , sdi_c;

  tuner_pitch_SLICE_0 \tuner.pitch.SLICE_0 ( .DI1(\tuner.pitch.n133[0] ), 
    .D1(\tuner.pitch.n5501 ), .C1(\tuner.pitch.counter[0] ), .B1(VCC_net), 
    .LSR(\tuner.pitch.counter_31__N_333 ), .CLK(int_osc), 
    .CIN1(\tuner.pitch.n5501 ), .Q1(\tuner.pitch.counter[0] ), 
    .F1(\tuner.pitch.n133[0] ), .COUT1(\tuner.pitch.n3483 ), 
    .COUT0(\tuner.pitch.n5501 ));
  tuner_pitch_SLICE_1 \tuner.pitch.SLICE_1 ( .DI1(\tuner.pitch.n133[6] ), 
    .DI0(\tuner.pitch.n133[5] ), .D1(\tuner.pitch.n5561 ), 
    .C1(\tuner.pitch.counter[6] ), .D0(\tuner.pitch.n3487 ), 
    .C0(\tuner.pitch.counter[5] ), .LSR(\tuner.pitch.counter_31__N_333 ), 
    .CLK(int_osc), .CIN0(\tuner.pitch.n3487 ), .CIN1(\tuner.pitch.n5561 ), 
    .Q0(\tuner.pitch.counter[5] ), .Q1(\tuner.pitch.counter[6] ), 
    .F0(\tuner.pitch.n133[5] ), .F1(\tuner.pitch.n133[6] ), 
    .COUT1(\tuner.pitch.n3489 ), .COUT0(\tuner.pitch.n5561 ));
  tuner_pitch_SLICE_2 \tuner.pitch.SLICE_2 ( .DI1(\tuner.pitch.n133[4] ), 
    .DI0(\tuner.pitch.n133[3] ), .D1(\tuner.pitch.n5558 ), 
    .C1(\tuner.pitch.counter[4] ), .D0(\tuner.pitch.n3485 ), 
    .C0(\tuner.pitch.counter[3] ), .LSR(\tuner.pitch.counter_31__N_333 ), 
    .CLK(int_osc), .CIN0(\tuner.pitch.n3485 ), .CIN1(\tuner.pitch.n5558 ), 
    .Q0(\tuner.pitch.counter[3] ), .Q1(\tuner.pitch.counter[4] ), 
    .F0(\tuner.pitch.n133[3] ), .F1(\tuner.pitch.n133[4] ), 
    .COUT1(\tuner.pitch.n3487 ), .COUT0(\tuner.pitch.n5558 ));
  tuner_pitch_SLICE_3 \tuner.pitch.SLICE_3 ( .DI1(\tuner.pitch.n133[2] ), 
    .DI0(\tuner.pitch.n133[1] ), .D1(\tuner.pitch.n5555 ), 
    .C1(\tuner.pitch.counter[2] ), .D0(\tuner.pitch.n3483 ), 
    .C0(\tuner.pitch.counter[1] ), .LSR(\tuner.pitch.counter_31__N_333 ), 
    .CLK(int_osc), .CIN0(\tuner.pitch.n3483 ), .CIN1(\tuner.pitch.n5555 ), 
    .Q0(\tuner.pitch.counter[1] ), .Q1(\tuner.pitch.counter[2] ), 
    .F0(\tuner.pitch.n133[1] ), .F1(\tuner.pitch.n133[2] ), 
    .COUT1(\tuner.pitch.n3485 ), .COUT0(\tuner.pitch.n5555 ));
  tuner_pitch_SLICE_4 \tuner.pitch.SLICE_4 ( .DI0(\tuner.pitch.n133[31] ), 
    .D1(\tuner.pitch.n5600 ), .D0(\tuner.pitch.n3513 ), 
    .C0(\tuner.pitch.counter[31] ), .LSR(\tuner.pitch.counter_31__N_333 ), 
    .CLK(int_osc), .CIN0(\tuner.pitch.n3513 ), .CIN1(\tuner.pitch.n5600 ), 
    .Q0(\tuner.pitch.counter[31] ), .F0(\tuner.pitch.n133[31] ), 
    .COUT0(\tuner.pitch.n5600 ));
  tuner_pitch_SLICE_5 \tuner.pitch.SLICE_5 ( .DI1(\tuner.pitch.n133[30] ), 
    .DI0(\tuner.pitch.n133[29] ), .D1(\tuner.pitch.n5597 ), 
    .C1(\tuner.pitch.counter[30] ), .D0(\tuner.pitch.n3511 ), 
    .C0(\tuner.pitch.counter[29] ), .LSR(\tuner.pitch.counter_31__N_333 ), 
    .CLK(int_osc), .CIN0(\tuner.pitch.n3511 ), .CIN1(\tuner.pitch.n5597 ), 
    .Q0(\tuner.pitch.counter[29] ), .Q1(\tuner.pitch.counter[30] ), 
    .F0(\tuner.pitch.n133[29] ), .F1(\tuner.pitch.n133[30] ), 
    .COUT1(\tuner.pitch.n3513 ), .COUT0(\tuner.pitch.n5597 ));
  tuner_pitch_SLICE_6 \tuner.pitch.SLICE_6 ( .DI1(\tuner.pitch.n133[28] ), 
    .DI0(\tuner.pitch.n133[27] ), .D1(\tuner.pitch.n5594 ), 
    .C1(\tuner.pitch.counter[28] ), .D0(\tuner.pitch.n3509 ), 
    .C0(\tuner.pitch.counter[27] ), .LSR(\tuner.pitch.counter_31__N_333 ), 
    .CLK(int_osc), .CIN0(\tuner.pitch.n3509 ), .CIN1(\tuner.pitch.n5594 ), 
    .Q0(\tuner.pitch.counter[27] ), .Q1(\tuner.pitch.counter[28] ), 
    .F0(\tuner.pitch.n133[27] ), .F1(\tuner.pitch.n133[28] ), 
    .COUT1(\tuner.pitch.n3511 ), .COUT0(\tuner.pitch.n5594 ));
  tuner_pitch_SLICE_7 \tuner.pitch.SLICE_7 ( .DI1(\tuner.pitch.n133[26] ), 
    .DI0(\tuner.pitch.n133[25] ), .D1(\tuner.pitch.n5591 ), 
    .C1(\tuner.pitch.counter[26] ), .D0(\tuner.pitch.n3507 ), 
    .C0(\tuner.pitch.counter[25] ), .LSR(\tuner.pitch.counter_31__N_333 ), 
    .CLK(int_osc), .CIN0(\tuner.pitch.n3507 ), .CIN1(\tuner.pitch.n5591 ), 
    .Q0(\tuner.pitch.counter[25] ), .Q1(\tuner.pitch.counter[26] ), 
    .F0(\tuner.pitch.n133[25] ), .F1(\tuner.pitch.n133[26] ), 
    .COUT1(\tuner.pitch.n3509 ), .COUT0(\tuner.pitch.n5591 ));
  tuner_pitch_SLICE_8 \tuner.pitch.SLICE_8 ( .DI1(\tuner.pitch.n133[24] ), 
    .DI0(\tuner.pitch.n133[23] ), .D1(\tuner.pitch.n5588 ), 
    .C1(\tuner.pitch.counter[24] ), .D0(\tuner.pitch.n3505 ), 
    .C0(\tuner.pitch.counter[23] ), .LSR(\tuner.pitch.counter_31__N_333 ), 
    .CLK(int_osc), .CIN0(\tuner.pitch.n3505 ), .CIN1(\tuner.pitch.n5588 ), 
    .Q0(\tuner.pitch.counter[23] ), .Q1(\tuner.pitch.counter[24] ), 
    .F0(\tuner.pitch.n133[23] ), .F1(\tuner.pitch.n133[24] ), 
    .COUT1(\tuner.pitch.n3507 ), .COUT0(\tuner.pitch.n5588 ));
  tuner_pitch_SLICE_9 \tuner.pitch.SLICE_9 ( .DI1(\tuner.pitch.n133[22] ), 
    .DI0(\tuner.pitch.n133[21] ), .D1(\tuner.pitch.n5585 ), 
    .C1(\tuner.pitch.counter[22] ), .D0(\tuner.pitch.n3503 ), 
    .C0(\tuner.pitch.counter[21] ), .LSR(\tuner.pitch.counter_31__N_333 ), 
    .CLK(int_osc), .CIN0(\tuner.pitch.n3503 ), .CIN1(\tuner.pitch.n5585 ), 
    .Q0(\tuner.pitch.counter[21] ), .Q1(\tuner.pitch.counter[22] ), 
    .F0(\tuner.pitch.n133[21] ), .F1(\tuner.pitch.n133[22] ), 
    .COUT1(\tuner.pitch.n3505 ), .COUT0(\tuner.pitch.n5585 ));
  tuner_pitch_SLICE_10 \tuner.pitch.SLICE_10 ( .DI1(\tuner.pitch.n133[20] ), 
    .DI0(\tuner.pitch.n133[19] ), .D1(\tuner.pitch.n5582 ), 
    .C1(\tuner.pitch.counter[20] ), .D0(\tuner.pitch.n3501 ), 
    .C0(\tuner.pitch.counter[19] ), .LSR(\tuner.pitch.counter_31__N_333 ), 
    .CLK(int_osc), .CIN0(\tuner.pitch.n3501 ), .CIN1(\tuner.pitch.n5582 ), 
    .Q0(\tuner.pitch.counter[19] ), .Q1(\tuner.pitch.counter[20] ), 
    .F0(\tuner.pitch.n133[19] ), .F1(\tuner.pitch.n133[20] ), 
    .COUT1(\tuner.pitch.n3503 ), .COUT0(\tuner.pitch.n5582 ));
  tuner_pitch_SLICE_11 \tuner.pitch.SLICE_11 ( .DI1(\tuner.pitch.n133[18] ), 
    .DI0(\tuner.pitch.n133[17] ), .D1(\tuner.pitch.n5579 ), 
    .C1(\tuner.pitch.counter[18] ), .D0(\tuner.pitch.n3499 ), 
    .C0(\tuner.pitch.counter[17] ), .LSR(\tuner.pitch.counter_31__N_333 ), 
    .CLK(int_osc), .CIN0(\tuner.pitch.n3499 ), .CIN1(\tuner.pitch.n5579 ), 
    .Q0(\tuner.pitch.counter[17] ), .Q1(\tuner.pitch.counter[18] ), 
    .F0(\tuner.pitch.n133[17] ), .F1(\tuner.pitch.n133[18] ), 
    .COUT1(\tuner.pitch.n3501 ), .COUT0(\tuner.pitch.n5579 ));
  tuner_pitch_SLICE_12 \tuner.pitch.SLICE_12 ( .DI1(\tuner.pitch.n133[16] ), 
    .DI0(\tuner.pitch.n133[15] ), .D1(\tuner.pitch.n5576 ), 
    .C1(\tuner.pitch.counter[16] ), .D0(\tuner.pitch.n3497 ), 
    .C0(\tuner.pitch.counter[15] ), .LSR(\tuner.pitch.counter_31__N_333 ), 
    .CLK(int_osc), .CIN0(\tuner.pitch.n3497 ), .CIN1(\tuner.pitch.n5576 ), 
    .Q0(\tuner.pitch.counter[15] ), .Q1(\tuner.pitch.counter[16] ), 
    .F0(\tuner.pitch.n133[15] ), .F1(\tuner.pitch.n133[16] ), 
    .COUT1(\tuner.pitch.n3499 ), .COUT0(\tuner.pitch.n5576 ));
  tuner_pitch_SLICE_13 \tuner.pitch.SLICE_13 ( .DI1(\tuner.pitch.n133[14] ), 
    .DI0(\tuner.pitch.n133[13] ), .D1(\tuner.pitch.n5573 ), 
    .C1(\tuner.pitch.counter[14] ), .D0(\tuner.pitch.n3495 ), 
    .C0(\tuner.pitch.counter[13] ), .LSR(\tuner.pitch.counter_31__N_333 ), 
    .CLK(int_osc), .CIN0(\tuner.pitch.n3495 ), .CIN1(\tuner.pitch.n5573 ), 
    .Q0(\tuner.pitch.counter[13] ), .Q1(\tuner.pitch.counter[14] ), 
    .F0(\tuner.pitch.n133[13] ), .F1(\tuner.pitch.n133[14] ), 
    .COUT1(\tuner.pitch.n3497 ), .COUT0(\tuner.pitch.n5573 ));
  tuner_pitch_SLICE_14 \tuner.pitch.SLICE_14 ( .DI1(\tuner.pitch.n133[12] ), 
    .DI0(\tuner.pitch.n133[11] ), .D1(\tuner.pitch.n5570 ), 
    .C1(\tuner.pitch.counter[12] ), .D0(\tuner.pitch.n3493 ), 
    .C0(\tuner.pitch.counter[11] ), .LSR(\tuner.pitch.counter_31__N_333 ), 
    .CLK(int_osc), .CIN0(\tuner.pitch.n3493 ), .CIN1(\tuner.pitch.n5570 ), 
    .Q0(\tuner.pitch.counter[11] ), .Q1(\tuner.pitch.counter[12] ), 
    .F0(\tuner.pitch.n133[11] ), .F1(\tuner.pitch.n133[12] ), 
    .COUT1(\tuner.pitch.n3495 ), .COUT0(\tuner.pitch.n5570 ));
  tuner_pitch_SLICE_15 \tuner.pitch.SLICE_15 ( .DI1(\tuner.pitch.n133[10] ), 
    .DI0(\tuner.pitch.n133[9] ), .D1(\tuner.pitch.n5567 ), 
    .C1(\tuner.pitch.counter[10] ), .D0(\tuner.pitch.n3491 ), 
    .C0(\tuner.pitch.counter[9] ), .LSR(\tuner.pitch.counter_31__N_333 ), 
    .CLK(int_osc), .CIN0(\tuner.pitch.n3491 ), .CIN1(\tuner.pitch.n5567 ), 
    .Q0(\tuner.pitch.counter[9] ), .Q1(\tuner.pitch.counter[10] ), 
    .F0(\tuner.pitch.n133[9] ), .F1(\tuner.pitch.n133[10] ), 
    .COUT1(\tuner.pitch.n3493 ), .COUT0(\tuner.pitch.n5567 ));
  tuner_pitch_SLICE_16 \tuner.pitch.SLICE_16 ( .DI1(\tuner.pitch.n133[8] ), 
    .DI0(\tuner.pitch.n133[7] ), .D1(\tuner.pitch.n5564 ), 
    .C1(\tuner.pitch.counter[8] ), .D0(\tuner.pitch.n3489 ), 
    .C0(\tuner.pitch.counter[7] ), .LSR(\tuner.pitch.counter_31__N_333 ), 
    .CLK(int_osc), .CIN0(\tuner.pitch.n3489 ), .CIN1(\tuner.pitch.n5564 ), 
    .Q0(\tuner.pitch.counter[7] ), .Q1(\tuner.pitch.counter[8] ), 
    .F0(\tuner.pitch.n133[7] ), .F1(\tuner.pitch.n133[8] ), 
    .COUT1(\tuner.pitch.n3491 ), .COUT0(\tuner.pitch.n5564 ));
  tuner_howLong_SLICE_17 \tuner.howLong.SLICE_17 ( 
    .DI0(\tuner.howLong.n133[31] ), .D1(\tuner.howLong.n5552 ), 
    .D0(\tuner.howLong.n3546 ), .C0(\tuner.howLong.counter[31] ), 
    .LSR(\tuner.howLong.counter_31__N_268 ), .CLK(int_osc), 
    .CIN0(\tuner.howLong.n3546 ), .CIN1(\tuner.howLong.n5552 ), 
    .Q0(\tuner.howLong.counter[31] ), .F0(\tuner.howLong.n133[31] ), 
    .COUT0(\tuner.howLong.n5552 ));
  tuner_howLong_SLICE_18 \tuner.howLong.SLICE_18 ( 
    .DI1(\tuner.howLong.n133[30] ), .DI0(\tuner.howLong.n133[29] ), 
    .D1(\tuner.howLong.n5549 ), .C1(\tuner.howLong.counter[30] ), 
    .D0(\tuner.howLong.n3544 ), .C0(\tuner.howLong.counter[29] ), 
    .LSR(\tuner.howLong.counter_31__N_268 ), .CLK(int_osc), 
    .CIN0(\tuner.howLong.n3544 ), .CIN1(\tuner.howLong.n5549 ), 
    .Q0(\tuner.howLong.counter[29] ), .Q1(\tuner.howLong.counter[30] ), 
    .F0(\tuner.howLong.n133[29] ), .F1(\tuner.howLong.n133[30] ), 
    .COUT1(\tuner.howLong.n3546 ), .COUT0(\tuner.howLong.n5549 ));
  tuner_howLong_SLICE_19 \tuner.howLong.SLICE_19 ( 
    .DI1(\tuner.howLong.n133[28] ), .DI0(\tuner.howLong.n133[27] ), 
    .D1(\tuner.howLong.n5546 ), .C1(\tuner.howLong.counter[28] ), 
    .D0(\tuner.howLong.n3542 ), .C0(\tuner.howLong.counter[27] ), 
    .LSR(\tuner.howLong.counter_31__N_268 ), .CLK(int_osc), 
    .CIN0(\tuner.howLong.n3542 ), .CIN1(\tuner.howLong.n5546 ), 
    .Q0(\tuner.howLong.counter[27] ), .Q1(\tuner.howLong.counter[28] ), 
    .F0(\tuner.howLong.n133[27] ), .F1(\tuner.howLong.n133[28] ), 
    .COUT1(\tuner.howLong.n3544 ), .COUT0(\tuner.howLong.n5546 ));
  tuner_howLong_SLICE_20 \tuner.howLong.SLICE_20 ( 
    .DI1(\tuner.howLong.n133[26] ), .DI0(\tuner.howLong.n133[25] ), 
    .D1(\tuner.howLong.n5543 ), .C1(\tuner.howLong.counter[26] ), 
    .D0(\tuner.howLong.n3540 ), .C0(\tuner.howLong.counter[25] ), 
    .LSR(\tuner.howLong.counter_31__N_268 ), .CLK(int_osc), 
    .CIN0(\tuner.howLong.n3540 ), .CIN1(\tuner.howLong.n5543 ), 
    .Q0(\tuner.howLong.counter[25] ), .Q1(\tuner.howLong.counter[26] ), 
    .F0(\tuner.howLong.n133[25] ), .F1(\tuner.howLong.n133[26] ), 
    .COUT1(\tuner.howLong.n3542 ), .COUT0(\tuner.howLong.n5543 ));
  tuner_howLong_SLICE_21 \tuner.howLong.SLICE_21 ( 
    .DI1(\tuner.howLong.n133[24] ), .DI0(\tuner.howLong.n133[23] ), 
    .D1(\tuner.howLong.n5540 ), .C1(\tuner.howLong.counter[24] ), 
    .D0(\tuner.howLong.n3538 ), .C0(\tuner.howLong.counter[23] ), 
    .LSR(\tuner.howLong.counter_31__N_268 ), .CLK(int_osc), 
    .CIN0(\tuner.howLong.n3538 ), .CIN1(\tuner.howLong.n5540 ), 
    .Q0(\tuner.howLong.counter[23] ), .Q1(\tuner.howLong.counter[24] ), 
    .F0(\tuner.howLong.n133[23] ), .F1(\tuner.howLong.n133[24] ), 
    .COUT1(\tuner.howLong.n3540 ), .COUT0(\tuner.howLong.n5540 ));
  tuner_howLong_SLICE_22 \tuner.howLong.SLICE_22 ( 
    .DI1(\tuner.howLong.n133[22] ), .DI0(\tuner.howLong.n133[21] ), 
    .D1(\tuner.howLong.n5537 ), .C1(\tuner.howLong.counter[22] ), 
    .D0(\tuner.howLong.n3536 ), .C0(\tuner.howLong.counter[21] ), 
    .LSR(\tuner.howLong.counter_31__N_268 ), .CLK(int_osc), 
    .CIN0(\tuner.howLong.n3536 ), .CIN1(\tuner.howLong.n5537 ), 
    .Q0(\tuner.howLong.counter[21] ), .Q1(\tuner.howLong.counter[22] ), 
    .F0(\tuner.howLong.n133[21] ), .F1(\tuner.howLong.n133[22] ), 
    .COUT1(\tuner.howLong.n3538 ), .COUT0(\tuner.howLong.n5537 ));
  tuner_howLong_SLICE_23 \tuner.howLong.SLICE_23 ( 
    .DI1(\tuner.howLong.n133[20] ), .DI0(\tuner.howLong.n133[19] ), 
    .D1(\tuner.howLong.n5534 ), .C1(\tuner.howLong.counter[20] ), 
    .D0(\tuner.howLong.n3534 ), .C0(\tuner.howLong.counter[19] ), 
    .LSR(\tuner.howLong.counter_31__N_268 ), .CLK(int_osc), 
    .CIN0(\tuner.howLong.n3534 ), .CIN1(\tuner.howLong.n5534 ), 
    .Q0(\tuner.howLong.counter[19] ), .Q1(\tuner.howLong.counter[20] ), 
    .F0(\tuner.howLong.n133[19] ), .F1(\tuner.howLong.n133[20] ), 
    .COUT1(\tuner.howLong.n3536 ), .COUT0(\tuner.howLong.n5534 ));
  tuner_howLong_SLICE_24 \tuner.howLong.SLICE_24 ( 
    .DI1(\tuner.howLong.n133[18] ), .DI0(\tuner.howLong.n133[17] ), 
    .D1(\tuner.howLong.n5531 ), .C1(\tuner.howLong.counter[18] ), 
    .D0(\tuner.howLong.n3532 ), .C0(\tuner.howLong.counter[17] ), 
    .LSR(\tuner.howLong.counter_31__N_268 ), .CLK(int_osc), 
    .CIN0(\tuner.howLong.n3532 ), .CIN1(\tuner.howLong.n5531 ), 
    .Q0(\tuner.howLong.counter[17] ), .Q1(\tuner.howLong.counter[18] ), 
    .F0(\tuner.howLong.n133[17] ), .F1(\tuner.howLong.n133[18] ), 
    .COUT1(\tuner.howLong.n3534 ), .COUT0(\tuner.howLong.n5531 ));
  tuner_howLong_SLICE_25 \tuner.howLong.SLICE_25 ( 
    .DI1(\tuner.howLong.n133[16] ), .DI0(\tuner.howLong.n133[15] ), 
    .D1(\tuner.howLong.n5528 ), .C1(\tuner.howLong.counter[16] ), 
    .D0(\tuner.howLong.n3530 ), .C0(\tuner.howLong.counter[15] ), 
    .LSR(\tuner.howLong.counter_31__N_268 ), .CLK(int_osc), 
    .CIN0(\tuner.howLong.n3530 ), .CIN1(\tuner.howLong.n5528 ), 
    .Q0(\tuner.howLong.counter[15] ), .Q1(\tuner.howLong.counter[16] ), 
    .F0(\tuner.howLong.n133[15] ), .F1(\tuner.howLong.n133[16] ), 
    .COUT1(\tuner.howLong.n3532 ), .COUT0(\tuner.howLong.n5528 ));
  tuner_howLong_SLICE_26 \tuner.howLong.SLICE_26 ( 
    .DI1(\tuner.howLong.n133[14] ), .DI0(\tuner.howLong.n133[13] ), 
    .D1(\tuner.howLong.n5525 ), .C1(\tuner.howLong.counter[14] ), 
    .D0(\tuner.howLong.n3528 ), .C0(\tuner.howLong.counter[13] ), 
    .LSR(\tuner.howLong.counter_31__N_268 ), .CLK(int_osc), 
    .CIN0(\tuner.howLong.n3528 ), .CIN1(\tuner.howLong.n5525 ), 
    .Q0(\tuner.howLong.counter[13] ), .Q1(\tuner.howLong.counter[14] ), 
    .F0(\tuner.howLong.n133[13] ), .F1(\tuner.howLong.n133[14] ), 
    .COUT1(\tuner.howLong.n3530 ), .COUT0(\tuner.howLong.n5525 ));
  tuner_howLong_SLICE_27 \tuner.howLong.SLICE_27 ( 
    .DI1(\tuner.howLong.n133[12] ), .DI0(\tuner.howLong.n133[11] ), 
    .D1(\tuner.howLong.n5522 ), .C1(\tuner.howLong.counter[12] ), 
    .D0(\tuner.howLong.n3526 ), .C0(\tuner.howLong.counter[11] ), 
    .LSR(\tuner.howLong.counter_31__N_268 ), .CLK(int_osc), 
    .CIN0(\tuner.howLong.n3526 ), .CIN1(\tuner.howLong.n5522 ), 
    .Q0(\tuner.howLong.counter[11] ), .Q1(\tuner.howLong.counter[12] ), 
    .F0(\tuner.howLong.n133[11] ), .F1(\tuner.howLong.n133[12] ), 
    .COUT1(\tuner.howLong.n3528 ), .COUT0(\tuner.howLong.n5522 ));
  tuner_howLong_SLICE_28 \tuner.howLong.SLICE_28 ( 
    .DI1(\tuner.howLong.n133[10] ), .DI0(\tuner.howLong.n133[9] ), 
    .D1(\tuner.howLong.n5519 ), .C1(\tuner.howLong.counter[10] ), 
    .D0(\tuner.howLong.n3524 ), .C0(\tuner.howLong.counter[9] ), 
    .LSR(\tuner.howLong.counter_31__N_268 ), .CLK(int_osc), 
    .CIN0(\tuner.howLong.n3524 ), .CIN1(\tuner.howLong.n5519 ), 
    .Q0(\tuner.howLong.counter[9] ), .Q1(\tuner.howLong.counter[10] ), 
    .F0(\tuner.howLong.n133[9] ), .F1(\tuner.howLong.n133[10] ), 
    .COUT1(\tuner.howLong.n3526 ), .COUT0(\tuner.howLong.n5519 ));
  tuner_howLong_SLICE_29 \tuner.howLong.SLICE_29 ( 
    .DI1(\tuner.howLong.n133[8] ), .DI0(\tuner.howLong.n133[7] ), 
    .D1(\tuner.howLong.n5516 ), .C1(\tuner.howLong.counter[8] ), 
    .D0(\tuner.howLong.n3522 ), .C0(\tuner.howLong.counter[7] ), 
    .LSR(\tuner.howLong.counter_31__N_268 ), .CLK(int_osc), 
    .CIN0(\tuner.howLong.n3522 ), .CIN1(\tuner.howLong.n5516 ), 
    .Q0(\tuner.howLong.counter[7] ), .Q1(\tuner.howLong.counter[8] ), 
    .F0(\tuner.howLong.n133[7] ), .F1(\tuner.howLong.n133[8] ), 
    .COUT1(\tuner.howLong.n3524 ), .COUT0(\tuner.howLong.n5516 ));
  tuner_howLong_SLICE_30 \tuner.howLong.SLICE_30 ( 
    .DI1(\tuner.howLong.n133[6] ), .DI0(\tuner.howLong.n133[5] ), 
    .D1(\tuner.howLong.n5513 ), .C1(\tuner.howLong.counter[6] ), 
    .D0(\tuner.howLong.n3520 ), .C0(\tuner.howLong.counter[5] ), 
    .LSR(\tuner.howLong.counter_31__N_268 ), .CLK(int_osc), 
    .CIN0(\tuner.howLong.n3520 ), .CIN1(\tuner.howLong.n5513 ), 
    .Q0(\tuner.howLong.counter[5] ), .Q1(\tuner.howLong.counter[6] ), 
    .F0(\tuner.howLong.n133[5] ), .F1(\tuner.howLong.n133[6] ), 
    .COUT1(\tuner.howLong.n3522 ), .COUT0(\tuner.howLong.n5513 ));
  tuner_howLong_SLICE_31 \tuner.howLong.SLICE_31 ( 
    .DI1(\tuner.howLong.n133[4] ), .DI0(\tuner.howLong.n133[3] ), 
    .D1(\tuner.howLong.n5510 ), .C1(\tuner.howLong.counter[4] ), 
    .D0(\tuner.howLong.n3518 ), .C0(\tuner.howLong.counter[3] ), 
    .LSR(\tuner.howLong.counter_31__N_268 ), .CLK(int_osc), 
    .CIN0(\tuner.howLong.n3518 ), .CIN1(\tuner.howLong.n5510 ), 
    .Q0(\tuner.howLong.counter[3] ), .Q1(\tuner.howLong.counter[4] ), 
    .F0(\tuner.howLong.n133[3] ), .F1(\tuner.howLong.n133[4] ), 
    .COUT1(\tuner.howLong.n3520 ), .COUT0(\tuner.howLong.n5510 ));
  tuner_howLong_SLICE_32 \tuner.howLong.SLICE_32 ( 
    .DI1(\tuner.howLong.n133[2] ), .DI0(\tuner.howLong.n133[1] ), 
    .D1(\tuner.howLong.n5507 ), .C1(\tuner.howLong.counter[2] ), 
    .D0(\tuner.howLong.n3516 ), .C0(\tuner.howLong.counter[1] ), 
    .LSR(\tuner.howLong.counter_31__N_268 ), .CLK(int_osc), 
    .CIN0(\tuner.howLong.n3516 ), .CIN1(\tuner.howLong.n5507 ), 
    .Q0(\tuner.howLong.counter[1] ), .Q1(\tuner.howLong.counter[2] ), 
    .F0(\tuner.howLong.n133[1] ), .F1(\tuner.howLong.n133[2] ), 
    .COUT1(\tuner.howLong.n3518 ), .COUT0(\tuner.howLong.n5507 ));
  tuner_howLong_SLICE_33 \tuner.howLong.SLICE_33 ( 
    .DI1(\tuner.howLong.n133[0] ), .D1(\tuner.howLong.n5504 ), 
    .C1(\tuner.howLong.counter[0] ), .B1(VCC_net), 
    .LSR(\tuner.howLong.counter_31__N_268 ), .CLK(int_osc), 
    .CIN1(\tuner.howLong.n5504 ), .Q1(\tuner.howLong.counter[0] ), 
    .F1(\tuner.howLong.n133[0] ), .COUT1(\tuner.howLong.n3516 ), 
    .COUT0(\tuner.howLong.n5504 ));
  tuner_SLICE_34 \tuner.SLICE_34 ( .DI0(\tuner.n9[0] ), .D0(n8), 
    .C0(\tuner.counter[0] ), .LSR(\tuner.nextstate_5__N_116 ), .CLK(int_osc), 
    .Q0(\tuner.counter[0] ), .F0(\tuner.n9[0] ));
  tuner_SLICE_36 \tuner.SLICE_36 ( .DI1(\tuner.n675[1] ), 
    .DI0(\tuner.n675[0] ), .D1(n11), .C1(\state[2] ), .B1(\freqThreshold3[1] ), 
    .A1(\tuner.n836[1] ), .D0(\state[2] ), .C0(n11), .B0(\freqThreshold3[0] ), 
    .A0(\tuner.n836[0] ), .CE(n2480), .CLK(int_osc), 
    .Q0(\tuner.freqThreshold[0] ), .Q1(\tuner.freqThreshold[1] ), 
    .F0(\tuner.n675[0] ), .F1(\tuner.n675[1] ));
  tuner_SLICE_37 \tuner.SLICE_37 ( .DI1(\tuner.n675[14] ), 
    .DI0(\tuner.n675[15] ), .D1(n11), .C1(\state[2] ), 
    .B1(\freqThreshold3[14] ), .A1(\tuner.n836[14] ), .D0(\state[2] ), 
    .C0(n11), .B0(n10), .A0(n3138), .CE(n2480), .CLK(int_osc), 
    .Q0(\tuner.freqThreshold[15] ), .Q1(\tuner.freqThreshold[14] ), 
    .F0(\tuner.n675[15] ), .F1(\tuner.n675[14] ));
  tuner_SLICE_39 \tuner.SLICE_39 ( .DI1(\tuner.n675[12] ), 
    .DI0(\tuner.n675[13] ), .D1(n11), .C1(\state[2] ), 
    .B1(\freqThreshold3[12] ), .A1(\tuner.n836[12] ), .D0(\state[2] ), 
    .C0(n11), .B0(\tuner.n836[13] ), .A0(\freqThreshold3[13] ), .CE(n2480), 
    .CLK(int_osc), .Q0(\tuner.freqThreshold[13] ), 
    .Q1(\tuner.freqThreshold[12] ), .F0(\tuner.n675[13] ), 
    .F1(\tuner.n675[12] ));
  tuner_SLICE_41 \tuner.SLICE_41 ( .DI1(\tuner.n675[10] ), 
    .DI0(\tuner.n675[11] ), .D1(n11), .C1(\state[2] ), 
    .B1(\freqThreshold3[10] ), .A1(\tuner.n836[10] ), 
    .D0(\freqThreshold3[11] ), .C0(n11), .B0(\state[2] ), 
    .A0(\tuner.n836[11] ), .CE(n2480), .CLK(int_osc), 
    .Q0(\tuner.freqThreshold[11] ), .Q1(\tuner.freqThreshold[10] ), 
    .F0(\tuner.n675[11] ), .F1(\tuner.n675[10] ));
  tuner_SLICE_43 \tuner.SLICE_43 ( .DI1(\tuner.n675[8] ), 
    .DI0(\tuner.n675[9] ), .D1(n11), .C1(\state[2] ), .B1(\freqThreshold3[8] ), 
    .A1(\tuner.n836[8] ), .D0(\state[2] ), .C0(n11), .B0(\freqThreshold3[9] ), 
    .A0(\tuner.n836[9] ), .CE(n2480), .CLK(int_osc), 
    .Q0(\tuner.freqThreshold[9] ), .Q1(\tuner.freqThreshold[8] ), 
    .F0(\tuner.n675[9] ), .F1(\tuner.n675[8] ));
  tuner_SLICE_45 \tuner.SLICE_45 ( .DI1(\tuner.n675[6] ), 
    .DI0(\tuner.n675[7] ), .D1(n11), .C1(\state[2] ), .B1(\freqThreshold3[6] ), 
    .A1(\tuner.n836[6] ), .D0(\state[2] ), .C0(n11), .B0(\freqThreshold3[7] ), 
    .A0(\tuner.n836[7] ), .CE(n2480), .CLK(int_osc), 
    .Q0(\tuner.freqThreshold[7] ), .Q1(\tuner.freqThreshold[6] ), 
    .F0(\tuner.n675[7] ), .F1(\tuner.n675[6] ));
  tuner_SLICE_47 \tuner.SLICE_47 ( .DI1(\tuner.n675[4] ), 
    .DI0(\tuner.n675[5] ), .D1(n11), .C1(\state[2] ), .B1(n3128), 
    .A1(\tuner.n836[4] ), .D0(\freqThreshold3[5] ), .C0(\tuner.n836[5] ), 
    .B0(\state[2] ), .A0(n11), .CE(n2480), .CLK(int_osc), 
    .Q0(\tuner.freqThreshold[5] ), .Q1(\tuner.freqThreshold[4] ), 
    .F0(\tuner.n675[5] ), .F1(\tuner.n675[4] ));
  tuner_SLICE_49 \tuner.SLICE_49 ( .DI1(\tuner.n675[2] ), 
    .DI0(\tuner.n675[3] ), .D1(n11), .C1(\state[2] ), .B1(\freqThreshold3[2] ), 
    .A1(\tuner.n836[2] ), .D0(\state[2] ), .C0(n11), .B0(\freqThreshold3[3] ), 
    .A0(\tuner.n836[3] ), .CE(n2480), .CLK(int_osc), 
    .Q0(\tuner.freqThreshold[3] ), .Q1(\tuner.freqThreshold[2] ), 
    .F0(\tuner.n675[3] ), .F1(\tuner.n675[2] ));
  SLICE_56 SLICE_56( .DI1(n2496), .DI0(n2497), .D1(\durThreshold[8] ), 
    .C1(n2480), .A1(n1019), .D0(n1024), .C0(\durThreshold[7] ), .B0(n2480), 
    .CLK(int_osc), .Q0(\durThreshold[7] ), .Q1(\durThreshold[8] ), .F0(n2497), 
    .F1(n2496));
  SLICE_58 SLICE_58( .DI1(n2494), .DI0(n2495), .D1(\durThreshold[11] ), 
    .C1(n2480), .B1(n1019), .D0(\durThreshold[9] ), .C0(n1018), .B0(n2480), 
    .CLK(int_osc), .Q0(\durThreshold[9] ), .Q1(\durThreshold[11] ), .F0(n2495), 
    .F1(n2494));
  SLICE_60 SLICE_60( .DI1(n2492), .DI0(n2493), .D1(\durThreshold[13] ), 
    .C1(n2480), .B1(n1015), .D0(\durThreshold[12] ), .C0(n1018), .B0(n2480), 
    .CLK(int_osc), .Q0(\durThreshold[12] ), .Q1(\durThreshold[13] ), 
    .F0(n2493), .F1(n2492));
  SLICE_62 SLICE_62( .DI1(n2490), .DI0(n2491), .D1(\durThreshold[16] ), 
    .C1(n2480), .A1(n1019), .D0(n1024), .C0(\durThreshold[15] ), .B0(n2480), 
    .CLK(int_osc), .Q0(\durThreshold[15] ), .Q1(\durThreshold[16] ), 
    .F0(n2491), .F1(n2490));
  SLICE_64 SLICE_64( .DI1(n2488), .DI0(n2489), .D1(\durThreshold[20] ), 
    .C1(n1019), .B1(n2480), .D0(\durThreshold[17] ), .C0(\state[0] ), 
    .B0(\state[1] ), .A0(\state[2] ), .CLK(int_osc), .Q0(\durThreshold[17] ), 
    .Q1(\durThreshold[20] ), .F0(n2489), .F1(n2488));
  SLICE_66 SLICE_66( .DI1(n2486), .DI0(n2487), .D1(\durThreshold[22] ), 
    .C1(\state[0] ), .B1(\state[2] ), .A1(\state[1] ), .D0(\durThreshold[21] ), 
    .C0(n1018), .B0(n2480), .CLK(int_osc), .Q0(\durThreshold[21] ), 
    .Q1(\durThreshold[22] ), .F0(n2487), .F1(n2486));
  SLICE_69 SLICE_69( .DI0(n2484), .D0(\durThreshold[24] ), .C0(n2480), 
    .B0(n1015), .CLK(int_osc), .Q0(\durThreshold[24] ), .F0(n2484));
  tuner_SLICE_71 \tuner.SLICE_71 ( .DI1(\tuner.n1007[18] ), 
    .DI0(\tuner.n1007[19] ), .D1(n11), .C1(\durThresh3[15] ), .B1(\state[2] ), 
    .A1(\tuner.n1168[18] ), .D0(\durThresh3[19] ), .C0(n11), 
    .B0(\tuner.n1168[19] ), .A0(\state[2] ), .CE(n2480), .CLK(int_osc), 
    .Q0(\tuner.durThreshold[19] ), .Q1(\tuner.durThreshold[18] ), 
    .F0(\tuner.n1007[19] ), .F1(\tuner.n1007[18] ));
  tuner_pitch_SLICE_73 \tuner.pitch.SLICE_73 ( .DI0(\tuner.pitch.pwm_N_337 ), 
    .D0(\tuner.pitch.n30 ), .C0(\tuner.pitch.n29 ), .B0(\tuner.pitch.n3767 ), 
    .A0(pwm_c), .CLK(int_osc), .Q0(pwm_c), .F0(\tuner.pitch.pwm_N_337 ));
  SLICE_76 SLICE_76( .DI1(\newFlattenedMCUout[39].sig_033.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[38].sig_000.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[39] ), .D0(\newFlattenedMCUout[38] ), .CE(n2476), 
    .CLK(ce_c), .Q0(\flattenedMCUout[38] ), .Q1(\flattenedMCUout[39] ), 
    .F0(\newFlattenedMCUout[38].sig_000.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[39].sig_033.FeedThruLUT ));
  SLICE_77 SLICE_77( .DI1(\newFlattenedMCUout[36].sig_002.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[37].sig_001.FeedThruLUT ), 
    .C1(\newFlattenedMCUout[36] ), .D0(\newFlattenedMCUout[37] ), .CE(n2476), 
    .CLK(ce_c), .Q0(\flattenedMCUout[37] ), .Q1(\flattenedMCUout[36] ), 
    .F0(\newFlattenedMCUout[37].sig_001.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[36].sig_002.FeedThruLUT ));
  SLICE_79 SLICE_79( .DI1(\newFlattenedMCUout[34].sig_004.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[35].sig_003.FeedThruLUT ), 
    .B1(\newFlattenedMCUout[34] ), .D0(\newFlattenedMCUout[35] ), .CE(n2476), 
    .CLK(ce_c), .Q0(\enabler.flattenedMCUout[35] ), 
    .Q1(\enabler.flattenedMCUout[34] ), 
    .F0(\newFlattenedMCUout[35].sig_003.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[34].sig_004.FeedThruLUT ));
  SLICE_81 SLICE_81( .DI1(\newFlattenedMCUout[32].sig_006.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[33].sig_005.FeedThruLUT ), 
    .C1(\newFlattenedMCUout[32] ), .C0(\newFlattenedMCUout[33] ), .CE(n2476), 
    .CLK(ce_c), .Q0(\enabler.flattenedMCUout[33] ), 
    .Q1(\enabler.flattenedMCUout[32] ), 
    .F0(\newFlattenedMCUout[33].sig_005.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[32].sig_006.FeedThruLUT ));
  SLICE_83 SLICE_83( .DI1(\newFlattenedMCUout[30].sig_008.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[31].sig_007.FeedThruLUT ), 
    .C1(\newFlattenedMCUout[30] ), .D0(\newFlattenedMCUout[31] ), .CE(n2476), 
    .CLK(ce_c), .Q0(\flattenedMCUout[31] ), .Q1(\flattenedMCUout[30] ), 
    .F0(\newFlattenedMCUout[31].sig_007.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[30].sig_008.FeedThruLUT ));
  SLICE_85 SLICE_85( .DI1(\newFlattenedMCUout[28].sig_010.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[29].sig_009.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[28] ), .D0(\newFlattenedMCUout[29] ), .CE(n2476), 
    .CLK(ce_c), .Q0(\flattenedMCUout[29] ), .Q1(\flattenedMCUout[28] ), 
    .F0(\newFlattenedMCUout[29].sig_009.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[28].sig_010.FeedThruLUT ));
  SLICE_87 SLICE_87( .DI1(\newFlattenedMCUout[26].sig_012.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[27].sig_011.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[26] ), .D0(\newFlattenedMCUout[27] ), .CE(n2476), 
    .CLK(ce_c), .Q0(\flattenedMCUout[27] ), .Q1(\flattenedMCUout[26] ), 
    .F0(\newFlattenedMCUout[27].sig_011.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[26].sig_012.FeedThruLUT ));
  SLICE_89 SLICE_89( .DI1(\newFlattenedMCUout[24].sig_014.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[25].sig_013.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[24] ), .D0(\newFlattenedMCUout[25] ), .CE(n2476), 
    .CLK(ce_c), .Q0(\flattenedMCUout[25] ), .Q1(\flattenedMCUout[24] ), 
    .F0(\newFlattenedMCUout[25].sig_013.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[24].sig_014.FeedThruLUT ));
  SLICE_91 SLICE_91( .DI1(\newFlattenedMCUout[22].sig_016.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[23].sig_015.FeedThruLUT ), 
    .C1(\newFlattenedMCUout[22] ), .D0(\newFlattenedMCUout[23] ), .CE(n2476), 
    .CLK(ce_c), .Q0(\flattenedMCUout[23] ), .Q1(\flattenedMCUout[22] ), 
    .F0(\newFlattenedMCUout[23].sig_015.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[22].sig_016.FeedThruLUT ));
  SLICE_93 SLICE_93( .DI1(\newFlattenedMCUout[20].sig_018.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[21].sig_017.FeedThruLUT ), 
    .C1(\newFlattenedMCUout[20] ), .C0(\newFlattenedMCUout[21] ), .CE(n2476), 
    .CLK(ce_c), .Q0(\flattenedMCUout[21] ), .Q1(\flattenedMCUout[20] ), 
    .F0(\newFlattenedMCUout[21].sig_017.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[20].sig_018.FeedThruLUT ));
  SLICE_95 SLICE_95( .DI1(\newFlattenedMCUout[18].sig_020.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[19].sig_019.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[18] ), .D0(\newFlattenedMCUout[19] ), .CE(n2476), 
    .CLK(ce_c), .Q0(\flattenedMCUout[19] ), .Q1(\flattenedMCUout[18] ), 
    .F0(\newFlattenedMCUout[19].sig_019.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[18].sig_020.FeedThruLUT ));
  SLICE_97 SLICE_97( .DI1(\newFlattenedMCUout[16].sig_022.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[17].sig_021.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[16] ), .D0(\newFlattenedMCUout[17] ), .CE(n2476), 
    .CLK(ce_c), .Q0(\flattenedMCUout[17] ), .Q1(\flattenedMCUout[16] ), 
    .F0(\newFlattenedMCUout[17].sig_021.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[16].sig_022.FeedThruLUT ));
  SLICE_99 SLICE_99( .DI1(\newFlattenedMCUout[14].sig_024.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[15].sig_023.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[14] ), .D0(\newFlattenedMCUout[15] ), .CE(n2476), 
    .CLK(ce_c), .Q0(\flattenedMCUout[15] ), .Q1(\flattenedMCUout[14] ), 
    .F0(\newFlattenedMCUout[15].sig_023.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[14].sig_024.FeedThruLUT ));
  SLICE_101 SLICE_101( .DI1(\newFlattenedMCUout[12].sig_026.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[13].sig_025.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[12] ), .D0(\newFlattenedMCUout[13] ), .CE(n2476), 
    .CLK(ce_c), .Q0(\flattenedMCUout[13] ), .Q1(\flattenedMCUout[12] ), 
    .F0(\newFlattenedMCUout[13].sig_025.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[12].sig_026.FeedThruLUT ));
  SLICE_103 SLICE_103( .DI1(\newFlattenedMCUout[10].sig_028.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[11].sig_027.FeedThruLUT ), 
    .C1(\newFlattenedMCUout[10] ), .D0(\newFlattenedMCUout[11] ), .CE(n2476), 
    .CLK(ce_c), .Q0(\flattenedMCUout[11] ), .Q1(\flattenedMCUout[10] ), 
    .F0(\newFlattenedMCUout[11].sig_027.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[10].sig_028.FeedThruLUT ));
  SLICE_105 SLICE_105( .DI1(\newFlattenedMCUout[8].sig_030.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[9].sig_029.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[8] ), .C0(\newFlattenedMCUout[9] ), .CE(n2476), 
    .CLK(ce_c), .Q0(\flattenedMCUout[9] ), .Q1(\flattenedMCUout[8] ), 
    .F0(\newFlattenedMCUout[9].sig_029.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[8].sig_030.FeedThruLUT ));
  SLICE_107 SLICE_107( .DI1(\newFlattenedMCUout[0].sig_032.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[1].sig_031.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[0] ), .D0(\newFlattenedMCUout[1] ), .CE(n2476), 
    .CLK(ce_c), .Q0(\flattenedMCUout[1] ), .Q1(\flattenedMCUout[0] ), 
    .F0(\newFlattenedMCUout[1].sig_031.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[0].sig_032.FeedThruLUT ));
  SLICE_110 SLICE_110( .DI0(\newFlattenedMCUout[38].sig_034.FeedThruLUT ), 
    .D0(\newFlattenedMCUout[38] ), .CLK(sck_c), .Q0(\newFlattenedMCUout[39] ), 
    .F0(\newFlattenedMCUout[38].sig_034.FeedThruLUT ));
  SLICE_111 SLICE_111( .DI1(\newFlattenedMCUout[36].sig_036.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[37].sig_035.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[36] ), .D0(\newFlattenedMCUout[37] ), .CLK(sck_c), 
    .Q0(\newFlattenedMCUout[38] ), .Q1(\newFlattenedMCUout[37] ), 
    .F0(\newFlattenedMCUout[37].sig_035.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[36].sig_036.FeedThruLUT ));
  SLICE_113 SLICE_113( .DI1(\newFlattenedMCUout[34].sig_038.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[35].sig_037.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[34] ), .D0(\newFlattenedMCUout[35] ), .CLK(sck_c), 
    .Q0(\newFlattenedMCUout[36] ), .Q1(\newFlattenedMCUout[35] ), 
    .F0(\newFlattenedMCUout[35].sig_037.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[34].sig_038.FeedThruLUT ));
  SLICE_115 SLICE_115( .DI1(\newFlattenedMCUout[32].sig_040.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[33].sig_039.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[32] ), .D0(\newFlattenedMCUout[33] ), .CLK(sck_c), 
    .Q0(\newFlattenedMCUout[34] ), .Q1(\newFlattenedMCUout[33] ), 
    .F0(\newFlattenedMCUout[33].sig_039.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[32].sig_040.FeedThruLUT ));
  SLICE_117 SLICE_117( .DI1(\newFlattenedMCUout[30].sig_042.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[31].sig_041.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[30] ), .D0(\newFlattenedMCUout[31] ), .CLK(sck_c), 
    .Q0(\newFlattenedMCUout[32] ), .Q1(\newFlattenedMCUout[31] ), 
    .F0(\newFlattenedMCUout[31].sig_041.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[30].sig_042.FeedThruLUT ));
  SLICE_119 SLICE_119( .DI1(\newFlattenedMCUout[28].sig_044.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[29].sig_043.FeedThruLUT ), 
    .C1(\newFlattenedMCUout[28] ), .D0(\newFlattenedMCUout[29] ), .CLK(sck_c), 
    .Q0(\newFlattenedMCUout[30] ), .Q1(\newFlattenedMCUout[29] ), 
    .F0(\newFlattenedMCUout[29].sig_043.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[28].sig_044.FeedThruLUT ));
  SLICE_121 SLICE_121( .DI1(\newFlattenedMCUout[26].sig_046.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[27].sig_045.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[26] ), .D0(\newFlattenedMCUout[27] ), .CLK(sck_c), 
    .Q0(\newFlattenedMCUout[28] ), .Q1(\newFlattenedMCUout[27] ), 
    .F0(\newFlattenedMCUout[27].sig_045.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[26].sig_046.FeedThruLUT ));
  SLICE_123 SLICE_123( .DI1(\newFlattenedMCUout[24].sig_048.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[25].sig_047.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[24] ), .D0(\newFlattenedMCUout[25] ), .CLK(sck_c), 
    .Q0(\newFlattenedMCUout[26] ), .Q1(\newFlattenedMCUout[25] ), 
    .F0(\newFlattenedMCUout[25].sig_047.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[24].sig_048.FeedThruLUT ));
  SLICE_125 SLICE_125( .DI1(\newFlattenedMCUout[22].sig_050.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[23].sig_049.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[22] ), .D0(\newFlattenedMCUout[23] ), .CLK(sck_c), 
    .Q0(\newFlattenedMCUout[24] ), .Q1(\newFlattenedMCUout[23] ), 
    .F0(\newFlattenedMCUout[23].sig_049.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[22].sig_050.FeedThruLUT ));
  SLICE_127 SLICE_127( .DI1(\newFlattenedMCUout[20].sig_052.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[21].sig_051.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[20] ), .D0(\newFlattenedMCUout[21] ), .CLK(sck_c), 
    .Q0(\newFlattenedMCUout[22] ), .Q1(\newFlattenedMCUout[21] ), 
    .F0(\newFlattenedMCUout[21].sig_051.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[20].sig_052.FeedThruLUT ));
  SLICE_129 SLICE_129( .DI1(\newFlattenedMCUout[18].sig_054.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[19].sig_053.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[18] ), .D0(\newFlattenedMCUout[19] ), .CLK(sck_c), 
    .Q0(\newFlattenedMCUout[20] ), .Q1(\newFlattenedMCUout[19] ), 
    .F0(\newFlattenedMCUout[19].sig_053.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[18].sig_054.FeedThruLUT ));
  SLICE_131 SLICE_131( .DI1(\newFlattenedMCUout[16].sig_056.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[17].sig_055.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[16] ), .D0(\newFlattenedMCUout[17] ), .CLK(sck_c), 
    .Q0(\newFlattenedMCUout[18] ), .Q1(\newFlattenedMCUout[17] ), 
    .F0(\newFlattenedMCUout[17].sig_055.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[16].sig_056.FeedThruLUT ));
  SLICE_133 SLICE_133( .DI1(\newFlattenedMCUout[14].sig_058.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[15].sig_057.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[14] ), .D0(\newFlattenedMCUout[15] ), .CLK(sck_c), 
    .Q0(\newFlattenedMCUout[16] ), .Q1(\newFlattenedMCUout[15] ), 
    .F0(\newFlattenedMCUout[15].sig_057.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[14].sig_058.FeedThruLUT ));
  SLICE_135 SLICE_135( .DI1(\newFlattenedMCUout[12].sig_060.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[13].sig_059.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[12] ), .D0(\newFlattenedMCUout[13] ), .CLK(sck_c), 
    .Q0(\newFlattenedMCUout[14] ), .Q1(\newFlattenedMCUout[13] ), 
    .F0(\newFlattenedMCUout[13].sig_059.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[12].sig_060.FeedThruLUT ));
  SLICE_137 SLICE_137( .DI1(\newFlattenedMCUout[10].sig_062.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[11].sig_061.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[10] ), .D0(\newFlattenedMCUout[11] ), .CLK(sck_c), 
    .Q0(\newFlattenedMCUout[12] ), .Q1(\newFlattenedMCUout[11] ), 
    .F0(\newFlattenedMCUout[11].sig_061.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[10].sig_062.FeedThruLUT ));
  SLICE_139 SLICE_139( .DI1(\newFlattenedMCUout[8].sig_064.FeedThruLUT ), 
    .DI0(\newFlattenedMCUout[9].sig_063.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[8] ), .D0(\newFlattenedMCUout[9] ), .CLK(sck_c), 
    .Q0(\newFlattenedMCUout[10] ), .Q1(\newFlattenedMCUout[9] ), 
    .F0(\newFlattenedMCUout[9].sig_063.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[8].sig_064.FeedThruLUT ));
  spi_SLICE_141 \spi.SLICE_141 ( 
    .DI1(\newFlattenedMCUout[0].sig_072.FeedThruLUT ), 
    .DI0(\spi.newFlattenedMCUout[7]_2.sig_065.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[0] ), .D0(\spi.newFlattenedMCUout[7]_2 ), 
    .CLK(sck_c), .Q0(\newFlattenedMCUout[8] ), .Q1(\newFlattenedMCUout[1] ), 
    .F0(\spi.newFlattenedMCUout[7]_2.sig_065.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[0].sig_072.FeedThruLUT ));
  spi_SLICE_142 \spi.SLICE_142 ( 
    .DI1(\newFlattenedMCUout[1].sig_071.FeedThruLUT ), 
    .DI0(\spi.newFlattenedMCUout[6]_2.sig_066.FeedThruLUT ), 
    .D1(\newFlattenedMCUout[1] ), .D0(\spi.newFlattenedMCUout[6]_2 ), 
    .CLK(sck_c), .Q0(\spi.newFlattenedMCUout[7]_2 ), 
    .Q1(\spi.newFlattenedMCUout[2]_2 ), 
    .F0(\spi.newFlattenedMCUout[6]_2.sig_066.FeedThruLUT ), 
    .F1(\newFlattenedMCUout[1].sig_071.FeedThruLUT ));
  spi_SLICE_143 \spi.SLICE_143 ( 
    .DI1(\spi.newFlattenedMCUout[4]_2.sig_068.FeedThruLUT ), 
    .DI0(\spi.newFlattenedMCUout[5]_2.sig_067.FeedThruLUT ), 
    .D1(\spi.newFlattenedMCUout[4]_2 ), .D0(\spi.newFlattenedMCUout[5]_2 ), 
    .CLK(sck_c), .Q0(\spi.newFlattenedMCUout[6]_2 ), 
    .Q1(\spi.newFlattenedMCUout[5]_2 ), 
    .F0(\spi.newFlattenedMCUout[5]_2.sig_067.FeedThruLUT ), 
    .F1(\spi.newFlattenedMCUout[4]_2.sig_068.FeedThruLUT ));
  spi_SLICE_145 \spi.SLICE_145 ( 
    .DI1(\spi.newFlattenedMCUout[2]_2.sig_070.FeedThruLUT ), 
    .DI0(\spi.newFlattenedMCUout[3]_2.sig_069.FeedThruLUT ), 
    .D1(\spi.newFlattenedMCUout[2]_2 ), .D0(\spi.newFlattenedMCUout[3]_2 ), 
    .CLK(sck_c), .Q0(\spi.newFlattenedMCUout[4]_2 ), 
    .Q1(\spi.newFlattenedMCUout[3]_2 ), 
    .F0(\spi.newFlattenedMCUout[3]_2.sig_069.FeedThruLUT ), 
    .F1(\spi.newFlattenedMCUout[2]_2.sig_070.FeedThruLUT ));
  tuner_SLICE_149 \tuner.SLICE_149 ( .D1(\state[0] ), .C1(\tuner.n2 ), 
    .B1(\freqThreshold0[14] ), .A1(\state[1] ), .D0(\freqThreshold2[14] ), 
    .C0(\state[0] ), .B0(\freqThreshold1[14] ), .F0(\tuner.n2 ), 
    .F1(\tuner.n836[14] ));
  tuner_SLICE_151 \tuner.SLICE_151 ( .D1(\state[0] ), .C1(\tuner.n2_adj_340 ), 
    .B1(\freqThreshold0[0] ), .A1(\state[1] ), .D0(\freqThreshold2[0] ), 
    .C0(\state[0] ), .A0(\freqThreshold1[0] ), .F0(\tuner.n2_adj_340 ), 
    .F1(\tuner.n836[0] ));
  tuner_SLICE_153 \tuner.SLICE_153 ( .D1(\state[0] ), .C1(n83), 
    .B1(\tuner.n3162 ), .A1(\state[1] ), .D0(\enabler.flattenedMCUout[33] ), 
    .C0(\enabler.flattenedMCUout[35] ), .B0(\enabler.flattenedMCUout[34] ), 
    .A0(\enabler.flattenedMCUout[32] ), .F0(n83), .F1(\tuner.n1168[18] ));
  tuner_SLICE_154 \tuner.SLICE_154 ( .D1(\state[1] ), .C1(\tuner.n3162 ), 
    .B1(n83), .A1(\state[0] ), .D0(\state[0] ), .C0(\durThresh2[15] ), 
    .B0(\durThresh1[15] ), .F0(\tuner.n3162 ), .F1(\tuner.n1168[15] ));
  tuner_SLICE_155 \tuner.SLICE_155 ( .D1(\state[0] ), .C1(\tuner.n2_adj_341 ), 
    .B1(\tuner.n4653 ), .A1(\state[1] ), .D0(\durThresh2[19] ), 
    .C0(\state[0] ), .B0(\durThresh1[19] ), .F0(\tuner.n2_adj_341 ), 
    .F1(\tuner.n1168[19] ));
  tuner_SLICE_157 \tuner.SLICE_157 ( .D1(n11), .C1(\tuner.n1168[24] ), 
    .B1(\durThresh3[20] ), .A1(\state[2] ), .D0(\state[0] ), .C0(n3160), 
    .B0(\state[1] ), .A0(n7_adj_355), .F0(\tuner.n1168[24] ), .F1(n1015));
  tuner_SLICE_158 \tuner.SLICE_158 ( .D1(n7_adj_355), .C1(n3160), 
    .A1(\state[1] ), .D0(\state[0] ), .C0(\flattenedMCUout[19] ), .B0(n3078), 
    .A0(\durThresh1[20] ), .F0(n3160), .F1(\enabler.n2658 ));
  tuner_SLICE_160 \tuner.SLICE_160 ( .D1(\state[2] ), .C1(n11), .B1(n1179), 
    .A1(\durThresh3[15] ), .D0(\state[0] ), .C0(\state[1] ), .A0(\state[2] ), 
    .F0(n11), .F1(n1018));
  tuner_SLICE_161 \tuner.SLICE_161 ( .D1(\state[0] ), .C1(\tuner.n2_adj_343 ), 
    .B1(\state[1] ), .A1(\freqThreshold0[1] ), .D0(\freqThreshold2[1] ), 
    .C0(\state[0] ), .B0(\freqThreshold1[1] ), .F0(\tuner.n2_adj_343 ), 
    .F1(\tuner.n836[1] ));
  tuner_SLICE_163 \tuner.SLICE_163 ( .D1(\state[0] ), .C1(\tuner.n2_adj_344 ), 
    .B1(\freqThreshold0[2] ), .A1(\state[1] ), .D0(\freqThreshold2[2] ), 
    .C0(\state[0] ), .A0(\freqThreshold1[2] ), .F0(\tuner.n2_adj_344 ), 
    .F1(\tuner.n836[2] ));
  tuner_SLICE_165 \tuner.SLICE_165 ( .D1(\state[0] ), .C1(\tuner.n2_adj_345 ), 
    .B1(\freqThreshold0[3] ), .A1(\state[1] ), .D0(\freqThreshold2[3] ), 
    .C0(\state[0] ), .A0(\freqThreshold1[3] ), .F0(\tuner.n2_adj_345 ), 
    .F1(\tuner.n836[3] ));
  tuner_SLICE_167 \tuner.SLICE_167 ( .D1(\state[0] ), .C1(\tuner.n3158 ), 
    .B1(n3152), .A1(\state[1] ), .D0(n3116), .C0(\state[0] ), .A0(n3122), 
    .F0(\tuner.n3158 ), .F1(\tuner.n836[4] ));
  tuner_SLICE_169 \tuner.SLICE_169 ( .D1(\state[0] ), .C1(\tuner.n2_adj_346 ), 
    .B1(\freqThreshold0[5] ), .A1(\state[1] ), .D0(\freqThreshold2[5] ), 
    .C0(\state[0] ), .A0(\freqThreshold1[5] ), .F0(\tuner.n2_adj_346 ), 
    .F1(\tuner.n836[5] ));
  tuner_SLICE_171 \tuner.SLICE_171 ( .D1(\state[0] ), .C1(\tuner.n2_adj_347 ), 
    .B1(\freqThreshold0[6] ), .A1(\state[1] ), .D0(\freqThreshold2[6] ), 
    .C0(\state[0] ), .B0(\freqThreshold1[6] ), .F0(\tuner.n2_adj_347 ), 
    .F1(\tuner.n836[6] ));
  tuner_SLICE_173 \tuner.SLICE_173 ( .D1(\state[0] ), .C1(\tuner.n2_adj_348 ), 
    .B1(n4643), .A1(\state[1] ), .D0(\freqThreshold2[7] ), .C0(\state[0] ), 
    .A0(\freqThreshold1[7] ), .F0(\tuner.n2_adj_348 ), .F1(\tuner.n836[7] ));
  tuner_SLICE_175 \tuner.SLICE_175 ( .D1(\state[0] ), .C1(\tuner.n2_adj_349 ), 
    .B1(\freqThreshold0[8] ), .A1(\state[1] ), .D0(\freqThreshold2[8] ), 
    .C0(\state[0] ), .B0(\freqThreshold1[8] ), .F0(\tuner.n2_adj_349 ), 
    .F1(\tuner.n836[8] ));
  tuner_SLICE_177 \tuner.SLICE_177 ( .D1(\state[0] ), .C1(\tuner.n2_adj_350 ), 
    .B1(\freqThreshold0[9] ), .A1(\state[1] ), .D0(\freqThreshold1[9] ), 
    .C0(\state[0] ), .A0(\freqThreshold2[9] ), .F0(\tuner.n2_adj_350 ), 
    .F1(\tuner.n836[9] ));
  tuner_SLICE_179 \tuner.SLICE_179 ( .D1(\state[0] ), .C1(\tuner.n2_adj_351 ), 
    .B1(\state[1] ), .A1(\freqThreshold0[10] ), .D0(\freqThreshold2[10] ), 
    .C0(\state[0] ), .B0(\freqThreshold1[10] ), .F0(\tuner.n2_adj_351 ), 
    .F1(\tuner.n836[10] ));
  tuner_SLICE_181 \tuner.SLICE_181 ( .D1(\state[0] ), .C1(\tuner.n2_adj_352 ), 
    .B1(\freqThreshold0[11] ), .A1(\state[1] ), .D0(\freqThreshold2[11] ), 
    .C0(\state[0] ), .B0(\freqThreshold1[11] ), .F0(\tuner.n2_adj_352 ), 
    .F1(\tuner.n836[11] ));
  tuner_SLICE_183 \tuner.SLICE_183 ( .D1(\state[0] ), .C1(\tuner.n2_adj_353 ), 
    .B1(\freqThreshold0[12] ), .A1(\state[1] ), .D0(\freqThreshold2[12] ), 
    .C0(\state[0] ), .B0(\freqThreshold1[12] ), .F0(\tuner.n2_adj_353 ), 
    .F1(\tuner.n836[12] ));
  tuner_SLICE_185 \tuner.SLICE_185 ( .D1(\state[0] ), .C1(\tuner.n2_adj_354 ), 
    .B1(\state[1] ), .A1(n4636), .D0(\freqThreshold2[13] ), .C0(\state[0] ), 
    .B0(\freqThreshold1[13] ), .F0(\tuner.n2_adj_354 ), .F1(\tuner.n836[13] ));
  enabler_SLICE_187 \enabler.SLICE_187 ( .D1(\state[0] ), .C1(\enabler.n22 ), 
    .B1(\enabler.n63 ), .A1(\state[1] ), .D0(\flattenedMCUout[31] ), 
    .C0(\state[0] ), .B0(\enabler.n4610 ), .A0(n3108), .F0(\enabler.n22 ), 
    .F1(n10));
  enabler_SLICE_189 \enabler.SLICE_189 ( .D1(\state[0] ), .C1(\enabler.n2642 ), 
    .B1(\durThresh1[23] ), .A1(\state[1] ), .D0(\durThresh2[23] ), 
    .C0(\enabler.n2641 ), .B0(\state[1] ), .F0(\enabler.n2642 ), .F1(n1177));
  enabler_SLICE_191 \enabler.SLICE_191 ( .D1(\state[1] ), .C1(\enabler.n3154 ), 
    .B1(\state[0] ), .A1(\durThresh1[15] ), .D0(\durThresh2[15] ), 
    .C0(\state[1] ), .A0(n83), .F0(\enabler.n3154 ), .F1(n1179));
  enabler_SLICE_194 \enabler.SLICE_194 ( .D1(n11), .C1(n1180), 
    .B1(\durThresh3[20] ), .A1(\state[2] ), .D0(\state[0] ), 
    .C0(\enabler.n2658 ), .B0(\state[1] ), .A0(\durThresh1[20] ), .F0(n1180), 
    .F1(n1019));
  tuner_SLICE_195 \tuner.SLICE_195 ( .C1(n7_adj_355), .B1(n83), 
    .D0(\enabler.flattenedMCUout[33] ), .C0(\enabler.flattenedMCUout[35] ), 
    .B0(\enabler.flattenedMCUout[34] ), .A0(\enabler.flattenedMCUout[32] ), 
    .F0(n7_adj_355), .F1(\tuner.n4653 ));
  aD2DT_d2d3_SLICE_198 \aD2DT.d2d3.SLICE_198 ( .D1(n11), .C1(\durThresh3[15] ), 
    .B1(\tuner.n1168[15] ), .A1(\state[2] ), .D0(\flattenedMCUout[8] ), 
    .C0(\flattenedMCUout[9] ), .B0(\flattenedMCUout[10] ), 
    .A0(\flattenedMCUout[11] ), .F0(\durThresh3[15] ), .F1(n1024));
  aD2DT_d2d3_SLICE_200 \aD2DT.d2d3.SLICE_200 ( .D0(\flattenedMCUout[8] ), 
    .C0(\flattenedMCUout[9] ), .B0(\flattenedMCUout[10] ), 
    .A0(\flattenedMCUout[11] ), .F0(\durThresh3[20] ));
  tuner_pitch_SLICE_203 \tuner.pitch.SLICE_203 ( 
    .D1(\tuner.freqThreshold[11] ), .C1(\tuner.pitch.counter[13] ), 
    .B1(\tuner.pitch.counter[11] ), .A1(\tuner.freqThreshold[13] ), 
    .D0(\tuner.freqThreshold[7] ), .C0(\tuner.pitch.counter[15] ), 
    .B0(\tuner.pitch.counter[7] ), .A0(\tuner.freqThreshold[15] ), 
    .F0(\tuner.pitch.n24 ), .F1(\tuner.pitch.n23 ));
  tuner_pitch_SLICE_204 \tuner.pitch.SLICE_204 ( .D1(\tuner.pitch.n23 ), 
    .C1(\tuner.pitch.n21 ), .B1(\tuner.pitch.n24 ), .A1(\tuner.pitch.n22 ), 
    .D0(\tuner.freqThreshold[6] ), .C0(\tuner.pitch.counter[5] ), 
    .B0(\tuner.pitch.counter[6] ), .A0(\tuner.freqThreshold[5] ), 
    .F0(\tuner.pitch.n21 ), .F1(\tuner.pitch.n30 ));
  tuner_pitch_SLICE_205 \tuner.pitch.SLICE_205 ( 
    .D0(\tuner.pitch.counter[27] ), .C0(\tuner.pitch.counter[23] ), 
    .B0(\tuner.pitch.counter[29] ), .A0(\tuner.pitch.counter[31] ), 
    .F0(\tuner.pitch.n28 ));
  tuner_pitch_SLICE_206 \tuner.pitch.SLICE_206 ( .D1(\tuner.pitch.n27 ), 
    .C1(\tuner.pitch.n25 ), .B1(\tuner.pitch.n28 ), .A1(\tuner.pitch.n26 ), 
    .D0(\tuner.pitch.counter[18] ), .C0(\tuner.pitch.counter[24] ), 
    .B0(\tuner.pitch.counter[20] ), .A0(\tuner.pitch.counter[16] ), 
    .F0(\tuner.pitch.n25 ), .F1(\tuner.pitch.n3767 ));
  tuner_pitch_SLICE_207 \tuner.pitch.SLICE_207 ( .D1(\tuner.pitch.n17 ), 
    .C1(\tuner.pitch.n20 ), .B1(\tuner.pitch.n18 ), .A1(\tuner.pitch.n19 ), 
    .D0(\tuner.pitch.counter[9] ), .C0(\tuner.pitch.counter[10] ), 
    .B0(\tuner.freqThreshold[10] ), .A0(\tuner.freqThreshold[9] ), 
    .F0(\tuner.pitch.n20 ), .F1(\tuner.pitch.n29 ));
  tuner_howLong_SLICE_209 \tuner.howLong.SLICE_209 ( .D1(\durThreshold[15] ), 
    .C1(\tuner.howLong.n18 ), .B1(\tuner.howLong.n25 ), 
    .A1(\tuner.howLong.counter[15] ), .D0(\tuner.howLong.counter[8] ), 
    .C0(\durThreshold[8] ), .B0(\tuner.howLong.counter[16] ), 
    .A0(\durThreshold[16] ), .F0(\tuner.howLong.n18 ), 
    .F1(\tuner.howLong.n30 ));
  tuner_howLong_SLICE_211 \tuner.howLong.SLICE_211 ( 
    .D0(\tuner.howLong.counter[22] ), .C0(\tuner.howLong.counter[9] ), 
    .B0(\durThreshold[9] ), .A0(\durThreshold[22] ), .F0(\tuner.howLong.n22 ));
  tuner_howLong_SLICE_212 \tuner.howLong.SLICE_212 ( .D1(\tuner.howLong.n20 ), 
    .C1(\tuner.howLong.n19 ), .B1(\tuner.howLong.n21 ), 
    .A1(\tuner.howLong.n22 ), .D0(\tuner.howLong.counter[20] ), 
    .C0(\tuner.howLong.counter[24] ), .B0(\durThreshold[20] ), 
    .A0(\durThreshold[24] ), .F0(\tuner.howLong.n19 ), 
    .F1(\tuner.howLong.n31 ));
  tuner_howLong_SLICE_213 \tuner.howLong.SLICE_213 ( 
    .D1(\tuner.durThreshold[18] ), .C1(\durThreshold[17] ), 
    .B1(\tuner.howLong.counter[17] ), .A1(\tuner.howLong.counter[18] ), 
    .D0(\tuner.howLong.counter[11] ), .C0(\durThreshold[11] ), 
    .B0(\tuner.howLong.counter[13] ), .A0(\durThreshold[13] ), 
    .F0(\tuner.howLong.n24 ), .F1(\tuner.howLong.n20 ));
  tuner_howLong_SLICE_214 \tuner.howLong.SLICE_214 ( .D1(\tuner.howLong.n27 ), 
    .C1(\tuner.howLong.n3764 ), .B1(\tuner.howLong.n25_adj_339 ), 
    .A1(\tuner.howLong.n26 ), .D0(\tuner.howLong.n31 ), 
    .C0(\tuner.howLong.n30 ), .B0(\tuner.howLong.n23 ), 
    .A0(\tuner.howLong.n24 ), .F0(\tuner.howLong.n3764 ), 
    .F1(\tuner.howLong.counter_31__N_268 ));
  tuner_howLong_SLICE_215 \tuner.howLong.SLICE_215 ( 
    .D1(\tuner.howLong.counter[0] ), .C1(\tuner.howLong.n24_adj_338 ), 
    .B1(\tuner.howLong.counter[31] ), .A1(\tuner.howLong.counter[4] ), 
    .D0(\tuner.howLong.counter[1] ), .C0(\tuner.howLong.counter[2] ), 
    .B0(\tuner.howLong.counter[5] ), .A0(\tuner.howLong.counter[6] ), 
    .F0(\tuner.howLong.n24_adj_338 ), .F1(\tuner.howLong.n27 ));
  tuner_howLong_SLICE_217 \tuner.howLong.SLICE_217 ( 
    .D0(\tuner.howLong.counter[14] ), .C0(\tuner.howLong.counter[27] ), 
    .B0(\tuner.howLong.counter[29] ), .A0(\tuner.howLong.counter[30] ), 
    .F0(\tuner.howLong.n26 ));
  enabler_SLICE_219 \enabler.SLICE_219 ( .D0(\enabler.flattenedMCUout[33] ), 
    .C0(\enabler.flattenedMCUout[35] ), .B0(\enabler.flattenedMCUout[34] ), 
    .A0(\enabler.flattenedMCUout[32] ), .F0(\enabler.n2641 ));
  enabler_SLICE_221 \enabler.SLICE_221 ( .D1(\flattenedMCUout[36] ), 
    .C1(\flattenedMCUout[37] ), .B1(\flattenedMCUout[39] ), 
    .A1(\flattenedMCUout[38] ), .D0(\flattenedMCUout[37] ), 
    .C0(\flattenedMCUout[36] ), .B0(\flattenedMCUout[38] ), 
    .A0(\flattenedMCUout[39] ), .F0(n4636), .F1(n4643));
  aT2FT_t2F0_SLICE_222 \aT2FT.t2F0.SLICE_222 ( .D1(\flattenedMCUout[37] ), 
    .C1(\flattenedMCUout[39] ), .B1(\flattenedMCUout[38] ), 
    .D0(\flattenedMCUout[36] ), .C0(\flattenedMCUout[37] ), 
    .B0(\flattenedMCUout[39] ), .A0(\flattenedMCUout[38] ), 
    .F0(\freqThreshold0[8] ), .F1(\enabler.n63 ));
  aT2FT_t2F0_SLICE_224 \aT2FT.t2F0.SLICE_224 ( .D1(\flattenedMCUout[36] ), 
    .C1(\flattenedMCUout[37] ), .B1(\flattenedMCUout[38] ), 
    .A1(\flattenedMCUout[39] ), .D0(\flattenedMCUout[37] ), 
    .C0(\flattenedMCUout[36] ), .B0(\flattenedMCUout[39] ), 
    .A0(\flattenedMCUout[38] ), .F0(\freqThreshold0[6] ), 
    .F1(\freqThreshold0[12] ));
  aT2FT_t2F3_SLICE_225 \aT2FT.t2F3.SLICE_225 ( .D1(\flattenedMCUout[13] ), 
    .C1(\flattenedMCUout[14] ), .B1(\flattenedMCUout[15] ), 
    .D0(\flattenedMCUout[12] ), .C0(\flattenedMCUout[13] ), 
    .B0(\flattenedMCUout[14] ), .A0(\flattenedMCUout[15] ), 
    .F0(\freqThreshold3[0] ), .F1(n3138));
  aT2FT_t2F3_SLICE_226 \aT2FT.t2F3.SLICE_226 ( .D1(\flattenedMCUout[12] ), 
    .C1(\flattenedMCUout[13] ), .B1(\flattenedMCUout[14] ), 
    .A1(\flattenedMCUout[15] ), .D0(\flattenedMCUout[13] ), 
    .C0(\flattenedMCUout[12] ), .B0(\flattenedMCUout[15] ), 
    .A0(\flattenedMCUout[14] ), .F0(n3128), .F1(\freqThreshold3[3] ));
  aT2FT_t2F3_SLICE_228 \aT2FT.t2F3.SLICE_228 ( .D1(\flattenedMCUout[13] ), 
    .C1(\flattenedMCUout[12] ), .B1(\flattenedMCUout[15] ), 
    .A1(\flattenedMCUout[14] ), .D0(\flattenedMCUout[12] ), 
    .C0(\flattenedMCUout[13] ), .B0(\flattenedMCUout[14] ), 
    .A0(\flattenedMCUout[15] ), .F0(\freqThreshold3[14] ), 
    .F1(\freqThreshold3[1] ));
  aT2FT_t2F3_SLICE_230 \aT2FT.t2F3.SLICE_230 ( .D1(\flattenedMCUout[12] ), 
    .C1(\flattenedMCUout[13] ), .B1(\flattenedMCUout[14] ), 
    .A1(\flattenedMCUout[15] ), .D0(\flattenedMCUout[13] ), 
    .C0(\flattenedMCUout[12] ), .B0(\flattenedMCUout[15] ), 
    .A0(\flattenedMCUout[14] ), .F0(\freqThreshold3[13] ), 
    .F1(\freqThreshold3[2] ));
  aT2FT_t2F3_SLICE_232 \aT2FT.t2F3.SLICE_232 ( .D1(\flattenedMCUout[12] ), 
    .C1(\flattenedMCUout[13] ), .B1(\flattenedMCUout[14] ), 
    .A1(\flattenedMCUout[15] ), .D0(\flattenedMCUout[13] ), 
    .C0(\flattenedMCUout[12] ), .B0(\flattenedMCUout[15] ), 
    .A0(\flattenedMCUout[14] ), .F0(\freqThreshold3[12] ), 
    .F1(\freqThreshold3[5] ));
  aT2FT_t2F3_SLICE_234 \aT2FT.t2F3.SLICE_234 ( .D1(\flattenedMCUout[12] ), 
    .C1(\flattenedMCUout[14] ), .B1(\flattenedMCUout[13] ), 
    .A1(\flattenedMCUout[15] ), .D0(\flattenedMCUout[14] ), 
    .C0(\flattenedMCUout[12] ), .B0(\flattenedMCUout[15] ), 
    .A0(\flattenedMCUout[13] ), .F0(\freqThreshold3[11] ), 
    .F1(\freqThreshold3[6] ));
  aT2FT_t2F3_SLICE_236 \aT2FT.t2F3.SLICE_236 ( .D1(\flattenedMCUout[12] ), 
    .C1(\flattenedMCUout[14] ), .B1(\flattenedMCUout[13] ), 
    .A1(\flattenedMCUout[15] ), .D0(\flattenedMCUout[14] ), 
    .C0(\flattenedMCUout[12] ), .B0(\flattenedMCUout[15] ), 
    .A0(\flattenedMCUout[13] ), .F0(\freqThreshold3[10] ), 
    .F1(\freqThreshold3[7] ));
  aT2FT_t2F3_SLICE_238 \aT2FT.t2F3.SLICE_238 ( .D1(\flattenedMCUout[12] ), 
    .C1(\flattenedMCUout[13] ), .B1(\flattenedMCUout[14] ), 
    .A1(\flattenedMCUout[15] ), .D0(\flattenedMCUout[13] ), 
    .C0(\flattenedMCUout[12] ), .B0(\flattenedMCUout[15] ), 
    .A0(\flattenedMCUout[14] ), .F0(\freqThreshold3[9] ), 
    .F1(\freqThreshold3[8] ));
  aT2FT_t2F2_SLICE_239 \aT2FT.t2F2.SLICE_239 ( .D1(\flattenedMCUout[22] ), 
    .C1(\flattenedMCUout[23] ), .B1(\flattenedMCUout[21] ), 
    .D0(\flattenedMCUout[20] ), .C0(\flattenedMCUout[22] ), 
    .B0(\flattenedMCUout[23] ), .A0(\flattenedMCUout[21] ), 
    .F0(\freqThreshold2[0] ), .F1(\enabler.n4610 ));
  aT2FT_t2F2_SLICE_240 \aT2FT.t2F2.SLICE_240 ( .D1(\flattenedMCUout[20] ), 
    .C1(\flattenedMCUout[22] ), .B1(\flattenedMCUout[21] ), 
    .A1(\flattenedMCUout[23] ), .D0(\flattenedMCUout[22] ), 
    .C0(\flattenedMCUout[20] ), .B0(\flattenedMCUout[23] ), 
    .A0(\flattenedMCUout[21] ), .F0(\freqThreshold2[14] ), 
    .F1(\freqThreshold2[3] ));
  aT2FT_t2F2_SLICE_242 \aT2FT.t2F2.SLICE_242 ( .D1(\flattenedMCUout[22] ), 
    .C1(\flattenedMCUout[20] ), .B1(\flattenedMCUout[21] ), 
    .A1(\flattenedMCUout[23] ), .D0(\flattenedMCUout[20] ), 
    .C0(\flattenedMCUout[22] ), .B0(\flattenedMCUout[23] ), 
    .A0(\flattenedMCUout[21] ), .F0(\freqThreshold2[13] ), 
    .F1(\freqThreshold2[1] ));
  aT2FT_t2F2_SLICE_244 \aT2FT.t2F2.SLICE_244 ( .D1(\flattenedMCUout[20] ), 
    .C1(\flattenedMCUout[22] ), .B1(\flattenedMCUout[21] ), 
    .A1(\flattenedMCUout[23] ), .D0(\flattenedMCUout[22] ), 
    .C0(\flattenedMCUout[20] ), .B0(\flattenedMCUout[23] ), 
    .A0(\flattenedMCUout[21] ), .F0(\freqThreshold2[12] ), 
    .F1(\freqThreshold2[2] ));
  aT2FT_t2F2_SLICE_246 \aT2FT.t2F2.SLICE_246 ( .D1(\flattenedMCUout[20] ), 
    .C1(\flattenedMCUout[23] ), .B1(\flattenedMCUout[22] ), 
    .A1(\flattenedMCUout[21] ), .D0(\flattenedMCUout[23] ), 
    .C0(\flattenedMCUout[20] ), .B0(\flattenedMCUout[21] ), 
    .A0(\flattenedMCUout[22] ), .F0(\freqThreshold2[11] ), 
    .F1(\freqThreshold2[5] ));
  aT2FT_t2F2_SLICE_248 \aT2FT.t2F2.SLICE_248 ( .D1(\flattenedMCUout[22] ), 
    .C1(\flattenedMCUout[20] ), .B1(\flattenedMCUout[23] ), 
    .A1(\flattenedMCUout[21] ), .D0(\flattenedMCUout[21] ), 
    .C0(\flattenedMCUout[22] ), .B0(\flattenedMCUout[20] ), 
    .A0(\flattenedMCUout[23] ), .F0(n3122), .F1(\freqThreshold2[6] ));
  aT2FT_t2F2_SLICE_250 \aT2FT.t2F2.SLICE_250 ( .D1(\flattenedMCUout[20] ), 
    .C1(\flattenedMCUout[22] ), .B1(\flattenedMCUout[23] ), 
    .A1(\flattenedMCUout[21] ), .D0(\flattenedMCUout[22] ), 
    .C0(\flattenedMCUout[20] ), .B0(\flattenedMCUout[21] ), 
    .A0(\flattenedMCUout[23] ), .F0(\freqThreshold2[10] ), 
    .F1(\freqThreshold2[7] ));
  aT2FT_t2F2_SLICE_252 \aT2FT.t2F2.SLICE_252 ( .D1(\flattenedMCUout[22] ), 
    .C1(\flattenedMCUout[20] ), .B1(\flattenedMCUout[23] ), 
    .A1(\flattenedMCUout[21] ), .D0(\flattenedMCUout[21] ), 
    .C0(\flattenedMCUout[22] ), .B0(\flattenedMCUout[20] ), 
    .A0(\flattenedMCUout[23] ), .F0(\freqThreshold2[9] ), 
    .F1(\freqThreshold2[8] ));
  aT2FT_t2F1_SLICE_253 \aT2FT.t2F1.SLICE_253 ( .D1(\flattenedMCUout[29] ), 
    .C1(\flattenedMCUout[30] ), .D0(\flattenedMCUout[28] ), 
    .C0(\flattenedMCUout[29] ), .B0(\flattenedMCUout[30] ), 
    .A0(\flattenedMCUout[31] ), .F0(\freqThreshold1[0] ), .F1(n3108));
  aT2FT_t2F1_SLICE_254 \aT2FT.t2F1.SLICE_254 ( .D1(\flattenedMCUout[28] ), 
    .C1(\flattenedMCUout[30] ), .B1(\flattenedMCUout[29] ), 
    .A1(\flattenedMCUout[31] ), .D0(\flattenedMCUout[30] ), 
    .C0(\flattenedMCUout[28] ), .B0(\flattenedMCUout[31] ), 
    .A0(\flattenedMCUout[29] ), .F0(\freqThreshold1[14] ), 
    .F1(\freqThreshold1[3] ));
  aT2FT_t2F1_SLICE_256 \aT2FT.t2F1.SLICE_256 ( .D1(\flattenedMCUout[28] ), 
    .C1(\flattenedMCUout[29] ), .B1(\flattenedMCUout[30] ), 
    .A1(\flattenedMCUout[31] ), .D0(\flattenedMCUout[29] ), 
    .C0(\flattenedMCUout[28] ), .B0(\flattenedMCUout[31] ), 
    .A0(\flattenedMCUout[30] ), .F0(\freqThreshold1[13] ), .F1(n3116));
  aT2FT_t2F1_SLICE_258 \aT2FT.t2F1.SLICE_258 ( .D1(\flattenedMCUout[29] ), 
    .C1(\flattenedMCUout[28] ), .B1(\flattenedMCUout[31] ), 
    .A1(\flattenedMCUout[30] ), .D0(\flattenedMCUout[28] ), 
    .C0(\flattenedMCUout[29] ), .B0(\flattenedMCUout[30] ), 
    .A0(\flattenedMCUout[31] ), .F0(\freqThreshold1[12] ), 
    .F1(\freqThreshold1[1] ));
  aT2FT_t2F1_SLICE_260 \aT2FT.t2F1.SLICE_260 ( .D1(\flattenedMCUout[28] ), 
    .C1(\flattenedMCUout[29] ), .B1(\flattenedMCUout[30] ), 
    .A1(\flattenedMCUout[31] ), .D0(\flattenedMCUout[29] ), 
    .C0(\flattenedMCUout[28] ), .B0(\flattenedMCUout[31] ), 
    .A0(\flattenedMCUout[30] ), .F0(\freqThreshold1[11] ), 
    .F1(\freqThreshold1[2] ));
  aT2FT_t2F1_SLICE_262 \aT2FT.t2F1.SLICE_262 ( .D1(\flattenedMCUout[28] ), 
    .C1(\flattenedMCUout[30] ), .B1(\flattenedMCUout[29] ), 
    .A1(\flattenedMCUout[31] ), .D0(\flattenedMCUout[30] ), 
    .C0(\flattenedMCUout[28] ), .B0(\flattenedMCUout[31] ), 
    .A0(\flattenedMCUout[29] ), .F0(\freqThreshold1[10] ), 
    .F1(\freqThreshold1[5] ));
  aT2FT_t2F1_SLICE_264 \aT2FT.t2F1.SLICE_264 ( .D1(\flattenedMCUout[28] ), 
    .C1(\flattenedMCUout[30] ), .B1(\flattenedMCUout[29] ), 
    .A1(\flattenedMCUout[31] ), .D0(\flattenedMCUout[30] ), 
    .C0(\flattenedMCUout[28] ), .B0(\flattenedMCUout[31] ), 
    .A0(\flattenedMCUout[29] ), .F0(\freqThreshold1[9] ), 
    .F1(\freqThreshold1[6] ));
  aT2FT_t2F1_SLICE_266 \aT2FT.t2F1.SLICE_266 ( .D1(\flattenedMCUout[28] ), 
    .C1(\flattenedMCUout[30] ), .B1(\flattenedMCUout[29] ), 
    .A1(\flattenedMCUout[31] ), .D0(\flattenedMCUout[30] ), 
    .C0(\flattenedMCUout[28] ), .B0(\flattenedMCUout[31] ), 
    .A0(\flattenedMCUout[29] ), .F0(\freqThreshold1[8] ), 
    .F1(\freqThreshold1[7] ));
  aT2FT_t2F0_SLICE_268 \aT2FT.t2F0.SLICE_268 ( .D1(\flattenedMCUout[36] ), 
    .C1(\flattenedMCUout[37] ), .B1(\flattenedMCUout[39] ), 
    .A1(\flattenedMCUout[38] ), .D0(\flattenedMCUout[37] ), 
    .C0(\flattenedMCUout[36] ), .B0(\flattenedMCUout[38] ), 
    .A0(\flattenedMCUout[39] ), .F0(\freqThreshold0[14] ), 
    .F1(\freqThreshold0[0] ));
  aT2FT_t2F0_SLICE_270 \aT2FT.t2F0.SLICE_270 ( .D1(\flattenedMCUout[37] ), 
    .C1(\flattenedMCUout[36] ), .B1(\flattenedMCUout[38] ), 
    .A1(\flattenedMCUout[39] ), .D0(\flattenedMCUout[36] ), 
    .C0(\flattenedMCUout[37] ), .B0(\flattenedMCUout[39] ), 
    .A0(\flattenedMCUout[38] ), .F0(\freqThreshold0[11] ), 
    .F1(\freqThreshold0[3] ));
  aT2FT_t2F0_SLICE_272 \aT2FT.t2F0.SLICE_272 ( .D1(\flattenedMCUout[36] ), 
    .C1(\flattenedMCUout[37] ), .B1(\flattenedMCUout[39] ), 
    .A1(\flattenedMCUout[38] ), .D0(\flattenedMCUout[37] ), 
    .C0(\flattenedMCUout[36] ), .B0(\flattenedMCUout[38] ), 
    .A0(\flattenedMCUout[39] ), .F0(\freqThreshold0[10] ), 
    .F1(\freqThreshold0[1] ));
  aT2FT_t2F0_SLICE_274 \aT2FT.t2F0.SLICE_274 ( .D1(\flattenedMCUout[36] ), 
    .C1(\flattenedMCUout[37] ), .B1(\flattenedMCUout[38] ), 
    .A1(\flattenedMCUout[39] ), .D0(\flattenedMCUout[37] ), 
    .C0(\flattenedMCUout[36] ), .B0(\flattenedMCUout[39] ), 
    .A0(\flattenedMCUout[38] ), .F0(\freqThreshold0[9] ), 
    .F1(\freqThreshold0[2] ));
  aT2FT_t2F0_SLICE_276 \aT2FT.t2F0.SLICE_276 ( .D1(\flattenedMCUout[37] ), 
    .C1(\flattenedMCUout[36] ), .B1(\flattenedMCUout[38] ), 
    .A1(\flattenedMCUout[39] ), .D0(\flattenedMCUout[36] ), 
    .C0(\flattenedMCUout[37] ), .B0(\flattenedMCUout[39] ), 
    .A0(\flattenedMCUout[38] ), .F0(\freqThreshold0[5] ), .F1(n3152));
  aD2DT_d2d3_SLICE_277 \aD2DT.d2d3.SLICE_277 ( .D1(\flattenedMCUout[9] ), 
    .C1(\flattenedMCUout[8] ), .B1(\flattenedMCUout[11] ), 
    .A1(\flattenedMCUout[10] ), .D0(\flattenedMCUout[8] ), 
    .C0(\flattenedMCUout[9] ), .B0(\flattenedMCUout[10] ), 
    .A0(\flattenedMCUout[11] ), .F0(\durThresh3[23] ), .F1(\durThresh3[19] ));
  aD2DT_d2d2_SLICE_279 \aD2DT.d2d2.SLICE_279 ( .D1(\flattenedMCUout[16] ), 
    .C1(\flattenedMCUout[17] ), .A1(\flattenedMCUout[18] ), 
    .D0(\flattenedMCUout[17] ), .C0(\flattenedMCUout[16] ), 
    .B0(\flattenedMCUout[18] ), .A0(\flattenedMCUout[19] ), 
    .F0(\durThresh2[23] ), .F1(n3078));
  aD2DT_d2d2_SLICE_280 \aD2DT.d2d2.SLICE_280 ( .D1(\flattenedMCUout[16] ), 
    .C1(\flattenedMCUout[17] ), .B1(\flattenedMCUout[19] ), 
    .A1(\flattenedMCUout[18] ), .D0(\flattenedMCUout[17] ), 
    .C0(\flattenedMCUout[16] ), .B0(\flattenedMCUout[18] ), 
    .A0(\flattenedMCUout[19] ), .F0(\durThresh2[15] ), .F1(\durThresh2[19] ));
  aD2DT_d2d1_SLICE_281 \aD2DT.d2d1.SLICE_281 ( .D1(\flattenedMCUout[24] ), 
    .C1(\flattenedMCUout[25] ), .B1(\flattenedMCUout[26] ), 
    .A1(\flattenedMCUout[27] ), .D0(\flattenedMCUout[25] ), 
    .C0(\flattenedMCUout[24] ), .B0(\flattenedMCUout[27] ), 
    .A0(\flattenedMCUout[26] ), .F0(\durThresh1[23] ), .F1(\durThresh1[15] ));
  aD2DT_d2d1_SLICE_283 \aD2DT.d2d1.SLICE_283 ( .D1(\flattenedMCUout[24] ), 
    .C1(\flattenedMCUout[25] ), .B1(\flattenedMCUout[26] ), 
    .A1(\flattenedMCUout[27] ), .D0(\flattenedMCUout[25] ), 
    .C0(\flattenedMCUout[24] ), .B0(\flattenedMCUout[27] ), 
    .A0(\flattenedMCUout[26] ), .F0(\durThresh1[19] ), .F1(\durThresh1[20] ));
  tuner_SLICE_285 \tuner.SLICE_285 ( .DI1(\tuner.nextstate[2] ), .D1(n11), 
    .C1(\tuner.n4686 ), .B1(\tuner.done ), .A1(\tuner.rep ), .D0(\state[0] ), 
    .C0(\state[1] ), .B0(\state[2] ), .A0(\tuner.done ), .CLK(int_osc), 
    .Q1(\state[2] ), .F0(\tuner.n4686 ), .F1(\tuner.nextstate[2] ));
  tuner_SLICE_286 \tuner.SLICE_286 ( .DI1(\tuner.nextstate[0] ), 
    .D1(\state[1] ), .C1(\state[0] ), .B1(\tuner.done ), .A1(\state[2] ), 
    .D0(\state[0] ), .C0(\state[1] ), .B0(\state[2] ), .CLK(int_osc), 
    .Q1(\state[0] ), .F0(n2480), .F1(\tuner.nextstate[0] ));
  tuner_SLICE_287 \tuner.SLICE_287 ( .DI1(\tuner.n530[1] ), .D1(\state[0] ), 
    .C1(\state[1] ), .B1(\tuner.done ), .D0(\state[2] ), .C0(\state[0] ), 
    .B0(\state[1] ), .LSR(\tuner.n2464 ), .CLK(int_osc), .Q1(\state[1] ), 
    .F0(\tuner.nextstate_5__N_116 ), .F1(\tuner.n530[1] ));
  SLICE_288 SLICE_288( .DI1(n4049), .D1(n11), .C1(\state[0] ), 
    .B1(stopCountFlag), .A1(n7), .D0(\state[0] ), .C0(\state[1] ), 
    .B0(\state[2] ), .A0(stopCountFlag), .CLK(int_osc), .Q1(stopCountFlag), 
    .F0(n8), .F1(n4049));
  tuner_pitch_SLICE_297 \tuner.pitch.SLICE_297 ( .D0(\tuner.freqThreshold[8] ), 
    .C0(\tuner.pitch.counter[0] ), .B0(\tuner.freqThreshold[0] ), 
    .A0(\tuner.pitch.counter[8] ), .F0(\tuner.pitch.n17 ));
  tuner_pitch_SLICE_298 \tuner.pitch.SLICE_298 ( .D0(\tuner.pitch.counter[1] ), 
    .C0(\tuner.freqThreshold[12] ), .B0(\tuner.freqThreshold[1] ), 
    .A0(\tuner.pitch.counter[12] ), .F0(\tuner.pitch.n19 ));
  tuner_pitch_SLICE_300 \tuner.pitch.SLICE_300 ( 
    .D0(\tuner.pitch.counter[30] ), .C0(\tuner.pitch.counter[21] ), 
    .B0(\tuner.pitch.counter[19] ), .A0(\tuner.pitch.counter[22] ), 
    .F0(\tuner.pitch.n27 ));
  tuner_pitch_SLICE_303 \tuner.pitch.SLICE_303 ( .D0(\tuner.pitch.n30 ), 
    .C0(\tuner.pitch.n29 ), .B0(\tuner.en ), .A0(\tuner.pitch.n3767 ), 
    .F0(\tuner.pitch.counter_31__N_333 ));
  tuner_pitch_SLICE_304 \tuner.pitch.SLICE_304 ( .D1(\tuner.pitch.counter[3] ), 
    .C1(\tuner.pitch.counter[14] ), .B1(\tuner.freqThreshold[14] ), 
    .A1(\tuner.freqThreshold[3] ), .D0(\tuner.pitch.counter[2] ), 
    .C0(\tuner.pitch.counter[4] ), .B0(\tuner.freqThreshold[4] ), 
    .A0(\tuner.freqThreshold[2] ), .F0(\tuner.pitch.n18 ), 
    .F1(\tuner.pitch.n22 ));
  tuner_SLICE_307 \tuner.SLICE_307 ( .DI1(\tuner.nextstate_5__N_196 ), 
    .D1(\state[0] ), .C1(\state[1] ), .B1(\state[2] ), .D0(\state[1] ), 
    .C0(\state[2] ), .CLK(int_osc), .Q1(\tuner.en ), .F0(n7), 
    .F1(\tuner.nextstate_5__N_196 ));
  tuner_SLICE_308 \tuner.SLICE_308 ( .DI1(n4191), .D1(\state[1] ), 
    .C1(\state[0] ), .B1(makingMusic_c), .A1(\state[2] ), .C0(makingMusic_c), 
    .CLK(int_osc), .Q1(makingMusic_c), .F0(n2476), .F1(n4191));
  tuner_SLICE_309 \tuner.SLICE_309 ( .DI1(\tuner.n520[1] ), 
    .D1(\tuner.counter[1] ), .C1(\tuner.counter[0] ), .D0(\tuner.counter[0] ), 
    .C0(\tuner.counter[1] ), .B0(\flattenedMCUout[1] ), 
    .A0(\flattenedMCUout[0] ), .CE(n8), .LSR(\tuner.nextstate_5__N_116 ), 
    .CLK(int_osc), .Q1(\tuner.counter[1] ), .F0(\tuner.rep ), 
    .F1(\tuner.n520[1] ));
  tuner_pitch_SLICE_311 \tuner.pitch.SLICE_311 ( 
    .D0(\tuner.pitch.counter[25] ), .C0(\tuner.pitch.counter[28] ), 
    .B0(\tuner.pitch.counter[26] ), .A0(\tuner.pitch.counter[17] ), 
    .F0(\tuner.pitch.n26 ));
  tuner_howLong_SLICE_312 \tuner.howLong.SLICE_312 ( .DI1(\tuner.n1007[23] ), 
    .D1(n11), .C1(n1177), .B1(\state[2] ), .A1(\durThresh3[23] ), 
    .D0(\tuner.howLong.counter[7] ), .C0(\tuner.howLong.counter[23] ), 
    .B0(\tuner.durThreshold[23] ), .A0(\durThreshold[7] ), .CE(n2480), 
    .CLK(int_osc), .Q1(\tuner.durThreshold[23] ), .F0(\tuner.howLong.n25 ), 
    .F1(\tuner.n1007[23] ));
  tuner_howLong_SLICE_313 \tuner.howLong.SLICE_313 ( 
    .D1(\tuner.durThreshold[19] ), .C1(\durThreshold[21] ), 
    .B1(\tuner.howLong.counter[19] ), .A1(\tuner.howLong.counter[21] ), 
    .D0(\tuner.howLong.counter[10] ), .C0(\tuner.durThreshold[19] ), 
    .B0(\tuner.howLong.counter[12] ), .A0(\durThreshold[12] ), 
    .F0(\tuner.howLong.n21 ), .F1(\tuner.howLong.n23 ));
  tuner_howLong_SLICE_315 \tuner.howLong.SLICE_315 ( 
    .DI1(\tuner.howLong.counter_31__N_268$n0 ), .D1(\tuner.howLong.n3764 ), 
    .C1(\tuner.howLong.n25_adj_339 ), .B1(\tuner.howLong.n26 ), 
    .A1(\tuner.howLong.n27 ), .D0(\tuner.howLong.counter[25] ), 
    .C0(\tuner.howLong.counter[3] ), .B0(\tuner.howLong.counter[26] ), 
    .A0(\tuner.howLong.counter[28] ), .CLK(int_osc), .Q1(\tuner.done ), 
    .F0(\tuner.howLong.n25_adj_339 ), 
    .F1(\tuner.howLong.counter_31__N_268$n0 ));
  SLICE_318 SLICE_318( .F0(VCC_net));
  tuner_SLICE_319 \tuner.SLICE_319 ( .D0(\state[2] ), .F0(\tuner.n2464 ));
  hf_osc hf_osc( .CLKHFPU(VCC_net), .CLKHFEN(VCC_net), .CLKHF(int_osc));
  spi_newFlattenedMCUout_i0 \spi.newFlattenedMCUout_i0 ( .PADDI(sdi_c), 
    .INCLK(sck_c), .DI0(\newFlattenedMCUout[0] ));
  ce ce_I( .PADDI(ce_c), .ce(ce));
  sdi sdi_I( .PADDI(sdi_c), .sdi(sdi));
  sck sck_I( .PADDI(sck_c), .sck(sck));
  makingMusic makingMusic_I( .PADDO(makingMusic_c), .makingMusic(makingMusic));
  pwm pwm_I( .PADDO(pwm_c), .pwm(pwm));
endmodule

module tuner_pitch_SLICE_0 ( input DI1, D1, C1, B1, LSR, CLK, CIN1, output Q1, 
    F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, LSR_dly;

  fa2 \tuner/pitch/counter_86_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(VCCI), .A1(GNDI), .B1(B1), .C1(C1), .D1(D1), .CI0(VCCI), .CI1(CIN1), 
    .S0(), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/pitch/counter_86__i0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module fa2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI0, CI1, output S0, S1, 
    CO0, CO1 );

  FA2 inst1( .A0(A0), .B0(B0), .C0(C0), .D0(D0), .CI0(CI0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .CI1(CI1), .CO0(CO0), .CO1(CO1), .S0(S0), .S1(S1));
  defparam inst1.INIT0 = "0xc33c";
  defparam inst1.INIT1 = "0xc33c";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module ffsre2 ( input D0, SP, CK, LSR, output Q );

  FD1P3XZ INST01( .D(D0), .SP(SP), .CK(CK), .SR(LSR), .Q(Q));
  defparam INST01.REGSET = "RESET";
  defparam INST01.SRMODE = "CE_OVER_LSR";
endmodule

module tuner_pitch_SLICE_1 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/pitch/counter_86_add_4_7 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/pitch/counter_86__i5 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/pitch/counter_86__i6 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_pitch_SLICE_2 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/pitch/counter_86_add_4_5 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/pitch/counter_86__i3 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/pitch/counter_86__i4 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_pitch_SLICE_3 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/pitch/counter_86_add_4_3 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/pitch/counter_86__i1 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/pitch/counter_86__i2 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_pitch_SLICE_4 ( input DI0, D1, D0, C0, LSR, CLK, CIN0, CIN1, 
    output Q0, F0, COUT0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  fa2 \tuner/pitch/counter_86_add_4_33 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(), .CO0(COUT0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/pitch/counter_86__i31 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_pitch_SLICE_5 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/pitch/counter_86_add_4_31 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/pitch/counter_86__i29 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/pitch/counter_86__i30 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_pitch_SLICE_6 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/pitch/counter_86_add_4_29 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/pitch/counter_86__i27 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/pitch/counter_86__i28 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_pitch_SLICE_7 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/pitch/counter_86_add_4_27 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/pitch/counter_86__i25 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/pitch/counter_86__i26 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_pitch_SLICE_8 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/pitch/counter_86_add_4_25 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/pitch/counter_86__i23 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/pitch/counter_86__i24 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_pitch_SLICE_9 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/pitch/counter_86_add_4_23 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/pitch/counter_86__i21 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/pitch/counter_86__i22 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_pitch_SLICE_10 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/pitch/counter_86_add_4_21 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/pitch/counter_86__i19 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/pitch/counter_86__i20 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_pitch_SLICE_11 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/pitch/counter_86_add_4_19 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/pitch/counter_86__i17 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/pitch/counter_86__i18 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_pitch_SLICE_12 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/pitch/counter_86_add_4_17 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/pitch/counter_86__i15 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/pitch/counter_86__i16 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_pitch_SLICE_13 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/pitch/counter_86_add_4_15 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/pitch/counter_86__i13 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/pitch/counter_86__i14 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_pitch_SLICE_14 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/pitch/counter_86_add_4_13 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/pitch/counter_86__i11 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/pitch/counter_86__i12 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_pitch_SLICE_15 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/pitch/counter_86_add_4_11 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/pitch/counter_86__i9 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/pitch/counter_86__i10 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_pitch_SLICE_16 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/pitch/counter_86_add_4_9 ( .A0(GNDI), .B0(GNDI), .C0(C0), .D0(D0), 
    .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), .S0(F0), 
    .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/pitch/counter_86__i7 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/pitch/counter_86__i8 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_howLong_SLICE_17 ( input DI0, D1, D0, C0, LSR, CLK, CIN0, CIN1, 
    output Q0, F0, COUT0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  fa2 \tuner/howLong/counter_85_add_4_33 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(), .CO0(COUT0), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/howLong/counter_85__i31 ( .D0(DI0_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_howLong_SLICE_18 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/howLong/counter_85_add_4_31 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/howLong/counter_85__i29 ( .D0(DI0_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/howLong/counter_85__i30 ( .D0(DI1_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_howLong_SLICE_19 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/howLong/counter_85_add_4_29 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/howLong/counter_85__i27 ( .D0(DI0_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/howLong/counter_85__i28 ( .D0(DI1_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_howLong_SLICE_20 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/howLong/counter_85_add_4_27 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/howLong/counter_85__i25 ( .D0(DI0_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/howLong/counter_85__i26 ( .D0(DI1_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_howLong_SLICE_21 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/howLong/counter_85_add_4_25 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/howLong/counter_85__i23 ( .D0(DI0_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/howLong/counter_85__i24 ( .D0(DI1_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_howLong_SLICE_22 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/howLong/counter_85_add_4_23 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/howLong/counter_85__i21 ( .D0(DI0_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/howLong/counter_85__i22 ( .D0(DI1_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_howLong_SLICE_23 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/howLong/counter_85_add_4_21 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/howLong/counter_85__i19 ( .D0(DI0_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/howLong/counter_85__i20 ( .D0(DI1_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_howLong_SLICE_24 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/howLong/counter_85_add_4_19 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/howLong/counter_85__i17 ( .D0(DI0_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/howLong/counter_85__i18 ( .D0(DI1_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_howLong_SLICE_25 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/howLong/counter_85_add_4_17 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/howLong/counter_85__i15 ( .D0(DI0_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/howLong/counter_85__i16 ( .D0(DI1_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_howLong_SLICE_26 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/howLong/counter_85_add_4_15 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/howLong/counter_85__i13 ( .D0(DI0_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/howLong/counter_85__i14 ( .D0(DI1_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_howLong_SLICE_27 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/howLong/counter_85_add_4_13 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/howLong/counter_85__i11 ( .D0(DI0_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/howLong/counter_85__i12 ( .D0(DI1_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_howLong_SLICE_28 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/howLong/counter_85_add_4_11 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/howLong/counter_85__i9 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/howLong/counter_85__i10 ( .D0(DI1_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_howLong_SLICE_29 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/howLong/counter_85_add_4_9 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/howLong/counter_85__i7 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/howLong/counter_85__i8 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_howLong_SLICE_30 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/howLong/counter_85_add_4_7 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/howLong/counter_85__i5 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/howLong/counter_85__i6 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_howLong_SLICE_31 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/howLong/counter_85_add_4_5 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/howLong/counter_85__i3 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/howLong/counter_85__i4 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_howLong_SLICE_32 ( input DI1, DI0, D1, C1, D0, C0, LSR, CLK, CIN0, 
    CIN1, output Q0, Q1, F0, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  fa2 \tuner/howLong/counter_85_add_4_3 ( .A0(GNDI), .B0(GNDI), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(C1), .D1(D1), .CI0(CIN0), .CI1(CIN1), 
    .S0(F0), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/howLong/counter_85__i1 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/howLong/counter_85__i2 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => COUT0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN0 => COUT0) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_howLong_SLICE_33 ( input DI1, D1, C1, B1, LSR, CLK, CIN1, output 
    Q1, F1, COUT1, COUT0 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, LSR_dly;

  fa2 \tuner/howLong/counter_85_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(VCCI), .A1(GNDI), .B1(B1), .C1(C1), .D1(D1), .CI0(VCCI), .CI1(CIN1), 
    .S0(), .S1(F1), .CO0(COUT0), .CO1(COUT1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/howLong/counter_85__i0 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => COUT1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => COUT1) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (CIN1 => COUT1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module tuner_SLICE_34 ( input DI0, D0, C0, LSR, CLK, output Q0, F0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut4 \tuner/i1242_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/counter__i0 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  LUT4 #("0x0FF0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_36 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, 
    CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40001 \tuner/mux_50_i2_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40002 \tuner/mux_50_i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/freqThreshold_i0_i1 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/freqThreshold_i0_i0 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40001 ( input A, B, C, D, output Z );

  LUT4 #("0x0ACC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40002 ( input A, B, C, D, output Z );

  LUT4 #("0x0CAC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_37 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, 
    CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40001 \tuner/mux_50_i15_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40003 \tuner/mux_50_i16_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/freqThreshold_i0_i14 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/freqThreshold_i0_i15 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40003 ( input A, B, C, D, output Z );

  LUT4 #("0x05C5") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_39 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, 
    CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40001 \tuner/mux_50_i13_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40004 \tuner/mux_50_i14_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/freqThreshold_i0_i12 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/freqThreshold_i0_i13 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40004 ( input A, B, C, D, output Z );

  LUT4 #("0x0ACA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_41 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, 
    CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40001 \tuner/mux_50_i11_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40005 \tuner/mux_50_i12_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/freqThreshold_i0_i10 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/freqThreshold_i0_i11 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40005 ( input A, B, C, D, output Z );

  LUT4 #("0x2F20") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_43 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, 
    CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40001 \tuner/mux_50_i9_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40002 \tuner/mux_50_i10_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/freqThreshold_i0_i8 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/freqThreshold_i0_i9 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module tuner_SLICE_45 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, 
    CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40001 \tuner/mux_50_i7_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40002 \tuner/mux_50_i8_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/freqThreshold_i0_i6 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/freqThreshold_i0_i7 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module tuner_SLICE_47 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, 
    CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40006 \tuner/mux_50_i5_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40007 \tuner/mux_50_i6_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/freqThreshold_i0_i4 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/freqThreshold_i0_i5 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40006 ( input A, B, C, D, output Z );

  LUT4 #("0x0A33") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40007 ( input A, B, C, D, output Z );

  LUT4 #("0x7520") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_49 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, 
    CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40001 \tuner/mux_50_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40002 \tuner/mux_50_i4_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/freqThreshold_i0_i2 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/freqThreshold_i0_i3 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_56 ( input DI1, DI0, D1, C1, A1, D0, C0, B0, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40008 i1349_3_lut( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40009 i1350_3_lut( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/durThreshold_i0_i8 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/durThreshold_i0_i7 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40008 ( input A, B, C, D, output Z );

  LUT4 #("0xAFA0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40009 ( input A, B, C, D, output Z );

  LUT4 #("0xFC30") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_58 ( input DI1, DI0, D1, C1, B1, D0, C0, B0, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40010 i1347_3_lut( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40011 i1348_3_lut( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/durThreshold_i0_i11 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/durThreshold_i0_i9 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40010 ( input A, B, C, D, output Z );

  LUT4 #("0xCFC0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40011 ( input A, B, C, D, output Z );

  LUT4 #("0xF3C0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_60 ( input DI1, DI0, D1, C1, B1, D0, C0, B0, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40010 i1345_3_lut( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40011 i1346_3_lut( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/durThreshold_i0_i13 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/durThreshold_i0_i12 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_62 ( input DI1, DI0, D1, C1, A1, D0, C0, B0, CLK, output Q0, Q1, 
    F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40008 i1343_3_lut( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40009 i1344_3_lut( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/durThreshold_i0_i16 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/durThreshold_i0_i15 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_64 ( input DI1, DI0, D1, C1, B1, D0, C0, B0, A0, CLK, output Q0, 
    Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40012 i1341_3_lut( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40013 i1342_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/durThreshold_i0_i20 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/durThreshold_i0_i17 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40012 ( input A, B, C, D, output Z );

  LUT4 #("0xF3C0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40013 ( input A, B, C, D, output Z );

  LUT4 #("0xFF56") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_66 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, CLK, output Q0, 
    Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40014 i1339_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40011 i1340_3_lut( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/durThreshold_i0_i22 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \tuner/durThreshold_i0_i21 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40014 ( input A, B, C, D, output Z );

  LUT4 #("0xFF36") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_69 ( input DI0, D0, C0, B0, CLK, output Q0, F0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40015 i1337_3_lut( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/durThreshold_i0_i24 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40015 ( input A, B, C, D, output Z );

  LUT4 #("0xCFC0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_71 ( input DI1, DI0, D1, C1, B1, A1, D0, C0, B0, A0, CE, 
    CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40016 \tuner/mux_62_i19_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \tuner/mux_62_i20_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/durThreshold_i0_i18 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/durThreshold_i0_i19 ( .D0(DI0_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40016 ( input A, B, C, D, output Z );

  LUT4 #("0x220F") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40017 ( input A, B, C, D, output Z );

  LUT4 #("0x4F40") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_pitch_SLICE_73 ( input DI0, D0, C0, B0, A0, CLK, output Q0, F0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40018 \tuner/pitch/i1_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  ffsre2 \tuner/pitch/pwm ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40018 ( input A, B, C, D, output Z );

  LUT4 #("0xAAA9") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_76 ( input DI1, DI0, D1, D0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40019 SLICE_76_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_76_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \enabler/flattenedMCUout__i34 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ffsre2 \enabler/flattenedMCUout__i33 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40019 ( input A, B, C, D, output Z );

  LUT4 #("0xFF00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40020 ( input A, B, C, D, output Z );

  LUT4 #("0xFF00") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module inverter ( input I, output Z );

  INV INST1( .A(I), .Z(Z));
endmodule

module SLICE_77 ( input DI1, DI0, C1, D0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40021 SLICE_77_K1( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_77_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \enabler/flattenedMCUout__i31 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ffsre2 \enabler/flattenedMCUout__i32 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40021 ( input A, B, C, D, output Z );

  LUT4 #("0xF0F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_79 ( input DI1, DI0, B1, D0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40022 SLICE_79_K1( .A(GNDI), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_79_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \enabler/flattenedMCUout__i29 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ffsre2 \enabler/flattenedMCUout__i30 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40022 ( input A, B, C, D, output Z );

  LUT4 #("0xCCCC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_81 ( input DI1, DI0, C1, C0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40021 SLICE_81_K1( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 SLICE_81_K0( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  ffsre2 \enabler/flattenedMCUout__i27 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ffsre2 \enabler/flattenedMCUout__i28 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40023 ( input A, B, C, D, output Z );

  LUT4 #("0xF0F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_83 ( input DI1, DI0, C1, D0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40021 SLICE_83_K1( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_83_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \enabler/flattenedMCUout__i25 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ffsre2 \enabler/flattenedMCUout__i26 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_85 ( input DI1, DI0, D1, D0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40019 SLICE_85_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_85_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \enabler/flattenedMCUout__i23 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ffsre2 \enabler/flattenedMCUout__i24 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_87 ( input DI1, DI0, D1, D0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40019 SLICE_87_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_87_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \enabler/flattenedMCUout__i21 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ffsre2 \enabler/flattenedMCUout__i22 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_89 ( input DI1, DI0, D1, D0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40019 SLICE_89_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_89_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \enabler/flattenedMCUout__i19 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ffsre2 \enabler/flattenedMCUout__i20 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_91 ( input DI1, DI0, C1, D0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40021 SLICE_91_K1( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_91_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \enabler/flattenedMCUout__i17 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ffsre2 \enabler/flattenedMCUout__i18 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_93 ( input DI1, DI0, C1, C0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40021 SLICE_93_K1( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 SLICE_93_K0( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  ffsre2 \enabler/flattenedMCUout__i15 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ffsre2 \enabler/flattenedMCUout__i16 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_95 ( input DI1, DI0, D1, D0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40019 SLICE_95_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_95_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \enabler/flattenedMCUout__i13 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ffsre2 \enabler/flattenedMCUout__i14 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_97 ( input DI1, DI0, D1, D0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40019 SLICE_97_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_97_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \enabler/flattenedMCUout__i11 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ffsre2 \enabler/flattenedMCUout__i12 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_99 ( input DI1, DI0, D1, D0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40019 SLICE_99_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_99_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \enabler/flattenedMCUout__i9 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ffsre2 \enabler/flattenedMCUout__i10 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_101 ( input DI1, DI0, D1, D0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40019 SLICE_101_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_101_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \enabler/flattenedMCUout__i7 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ffsre2 \enabler/flattenedMCUout__i8 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_103 ( input DI1, DI0, C1, D0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40021 SLICE_103_K1( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_103_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \enabler/flattenedMCUout__i5 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ffsre2 \enabler/flattenedMCUout__i6 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_105 ( input DI1, DI0, D1, C0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40019 SLICE_105_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40023 SLICE_105_K0( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  ffsre2 \enabler/flattenedMCUout__i3 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ffsre2 \enabler/flattenedMCUout__i4 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_107 ( input DI1, DI0, D1, D0, CE, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40019 SLICE_107_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_107_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \enabler/flattenedMCUout__i1 ( .D0(DI1_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ffsre2 \enabler/flattenedMCUout__i2 ( .D0(DI0_dly), .SP(CE_dly), 
    .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_110 ( input DI0, D0, CLK, output Q0, F0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40020 SLICE_110_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \spi/newFlattenedMCUout_i39 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_111 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 SLICE_111_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_111_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i37 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i38 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_113 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 SLICE_113_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_113_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i35 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i36 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_115 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 SLICE_115_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_115_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i33 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i34 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_117 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 SLICE_117_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_117_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i31 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i32 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_119 ( input DI1, DI0, C1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40021 SLICE_119_K1( .A(GNDI), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_119_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i29 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i30 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_121 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 SLICE_121_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_121_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i27 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i28 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_123 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 SLICE_123_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_123_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i25 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i26 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_125 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 SLICE_125_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_125_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i23 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i24 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_127 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 SLICE_127_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_127_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i21 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i22 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_129 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 SLICE_129_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_129_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i19 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i20 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_131 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 SLICE_131_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_131_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i17 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i18 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_133 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 SLICE_133_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_133_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i15 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i16 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_135 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 SLICE_135_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_135_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i13 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i14 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_137 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 SLICE_137_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_137_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i11 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i12 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module SLICE_139 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 SLICE_139_K1( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 SLICE_139_K0( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i9 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i10 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module spi_SLICE_141 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 \spi.SLICE_141_K1 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 \spi.SLICE_141_K0 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i1 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i8 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module spi_SLICE_142 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 \spi.SLICE_142_K1 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 \spi.SLICE_142_K0 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i2 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i7 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module spi_SLICE_143 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 \spi.SLICE_143_K1 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 \spi.SLICE_143_K0 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i5 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i6 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module spi_SLICE_145 ( input DI1, DI0, D1, D0, CLK, output Q0, Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40019 \spi.SLICE_145_K1 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 \spi.SLICE_145_K0 ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  ffsre2 \spi/newFlattenedMCUout_i3 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ffsre2 \spi/newFlattenedMCUout_i4 ( .D0(DI0_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module tuner_SLICE_149 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40024 \tuner/mux_51_Mux_14_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40025 \tuner/mux_51_Mux_14_i2_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40024 ( input A, B, C, D, output Z );

  LUT4 #("0xE4A0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40025 ( input A, B, C, D, output Z );

  LUT4 #("0xFC0C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_151 ( input D1, C1, B1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40024 \tuner/mux_51_Mux_0_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40026 \tuner/mux_51_Mux_0_i2_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40026 ( input A, B, C, D, output Z );

  LUT4 #("0xFA0A") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_153 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40027 \tuner/mux_63_Mux_18_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40028 \enabler/i1_4_lut_adj_10 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40027 ( input A, B, C, D, output Z );

  LUT4 #("0x2722") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40028 ( input A, B, C, D, output Z );

  LUT4 #("0xE0C0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_154 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40029 \tuner/mux_63_Mux_15_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40030 \tuner/mux_63_Mux_18_i2_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40029 ( input A, B, C, D, output Z );

  LUT4 #("0xF088") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40030 ( input A, B, C, D, output Z );

  LUT4 #("0xF0CC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_155 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40024 \tuner/mux_63_Mux_19_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40025 \tuner/mux_63_Mux_19_i2_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module tuner_SLICE_157 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40031 \tuner/mux_62_i25_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40032 \tuner/mux_63_Mux_24_i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40031 ( input A, B, C, D, output Z );

  LUT4 #("0x5033") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40032 ( input A, B, C, D, output Z );

  LUT4 #("0x1D0C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_158 ( input D1, C1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40033 \enabler/i1511_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40034 \tuner/mux_63_Mux_24_i2_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40033 ( input A, B, C, D, output Z );

  LUT4 #("0xF5A0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40034 ( input A, B, C, D, output Z );

  LUT4 #("0xFCAA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_160 ( input D1, C1, B1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40035 \tuner/mux_62_i22_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40036 \tuner/i1_2_lut_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40035 ( input A, B, C, D, output Z );

  LUT4 #("0x05C5") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40036 ( input A, B, C, D, output Z );

  LUT4 #("0xFFF5") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_161 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40037 \tuner/mux_51_Mux_1_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40025 \tuner/mux_51_Mux_1_i2_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40037 ( input A, B, C, D, output Z );

  LUT4 #("0xE2C0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_163 ( input D1, C1, B1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40024 \tuner/mux_51_Mux_2_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40026 \tuner/mux_51_Mux_2_i2_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module tuner_SLICE_165 ( input D1, C1, B1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40024 \tuner/mux_51_Mux_3_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40026 \tuner/mux_51_Mux_3_i2_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module tuner_SLICE_167 ( input D1, C1, B1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40038 \tuner/mux_51_Mux_4_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40039 \tuner/mux_51_Mux_4_i2_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40038 ( input A, B, C, D, output Z );

  LUT4 #("0x1B0A") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40039 ( input A, B, C, D, output Z );

  LUT4 #("0xAFA0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_169 ( input D1, C1, B1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40024 \tuner/mux_51_Mux_5_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40026 \tuner/mux_51_Mux_5_i2_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module tuner_SLICE_171 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40024 \tuner/mux_51_Mux_6_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40025 \tuner/mux_51_Mux_6_i2_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module tuner_SLICE_173 ( input D1, C1, B1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40024 \tuner/mux_51_Mux_7_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40026 \tuner/mux_51_Mux_7_i2_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module tuner_SLICE_175 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40024 \tuner/mux_51_Mux_8_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40025 \tuner/mux_51_Mux_8_i2_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module tuner_SLICE_177 ( input D1, C1, B1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40024 \tuner/mux_51_Mux_9_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40039 \tuner/mux_51_Mux_9_i2_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module tuner_SLICE_179 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40037 \tuner/mux_51_Mux_10_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40025 \tuner/mux_51_Mux_10_i2_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module tuner_SLICE_181 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40024 \tuner/mux_51_Mux_11_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40025 \tuner/mux_51_Mux_11_i2_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module tuner_SLICE_183 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40024 \tuner/mux_51_Mux_12_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40025 \tuner/mux_51_Mux_12_i2_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module tuner_SLICE_185 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40037 \tuner/mux_51_Mux_13_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40025 \tuner/mux_51_Mux_13_i2_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module enabler_SLICE_187 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40038 \enabler/i25_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40040 \enabler/i26_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40040 ( input A, B, C, D, output Z );

  LUT4 #("0xCFCA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module enabler_SLICE_189 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40029 \enabler/i1496_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40009 \enabler/i1495_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module enabler_SLICE_191 ( input D1, C1, B1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40041 \enabler/i1490_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40026 \enabler/i1489_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40041 ( input A, B, C, D, output Z );

  LUT4 #("0x1D0C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module enabler_SLICE_194 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40042 \tuner/mux_62_i21_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40043 \enabler/i1512_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40042 ( input A, B, C, D, output Z );

  LUT4 #("0x50CC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40043 ( input A, B, C, D, output Z );

  LUT4 #("0xF088") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_195 ( input C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40044 \tuner/i3414_2_lut ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40045 \enabler/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40044 ( input A, B, C, D, output Z );

  LUT4 #("0xCFCF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40045 ( input A, B, C, D, output Z );

  LUT4 #("0xFCF8") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aD2DT_d2d3_SLICE_198 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40046 \tuner/mux_62_i16_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40047 \aD2DT/d2d3/i1917_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40046 ( input A, B, C, D, output Z );

  LUT4 #("0x44F0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40047 ( input A, B, C, D, output Z );

  LUT4 #("0xA888") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aD2DT_d2d3_SLICE_200 ( input D0, C0, B0, A0, output F0 );

  lut40048 \aD2DT/d2d3/i1921_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40048 ( input A, B, C, D, output Z );

  LUT4 #("0xEEEA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_pitch_SLICE_203 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40049 \tuner/pitch/i7_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40050 \tuner/pitch/i8_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40049 ( input A, B, C, D, output Z );

  LUT4 #("0x7BDE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40050 ( input A, B, C, D, output Z );

  LUT4 #("0x7BDE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_pitch_SLICE_204 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40051 \tuner/pitch/i14_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40050 \tuner/pitch/i5_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40051 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_pitch_SLICE_205 ( input D0, C0, B0, A0, output F0 );

  lut40052 \tuner/pitch/i12_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40052 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_pitch_SLICE_206 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40051 \tuner/pitch/i15_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40053 \tuner/pitch/i9_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40053 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_pitch_SLICE_207 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40054 \tuner/pitch/i13_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40055 \tuner/pitch/i4_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40054 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40055 ( input A, B, C, D, output Z );

  LUT4 #("0x7DBE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_howLong_SLICE_209 ( input D1, C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );

  lut40056 \tuner/howLong/i13_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40057 \tuner/howLong/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40056 ( input A, B, C, D, output Z );

  LUT4 #("0xFDFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40057 ( input A, B, C, D, output Z );

  LUT4 #("0x6FF6") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_howLong_SLICE_211 ( input D0, C0, B0, A0, output F0 );

  lut40055 \tuner/howLong/i5_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module tuner_howLong_SLICE_212 ( input D1, C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );

  lut40058 \tuner/howLong/i14_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40059 \tuner/howLong/i2_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40058 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40059 ( input A, B, C, D, output Z );

  LUT4 #("0x7BDE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_howLong_SLICE_213 ( input D1, C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );

  lut40060 \tuner/howLong/i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40057 \tuner/howLong/i7_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40060 ( input A, B, C, D, output Z );

  LUT4 #("0x7DBE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_howLong_SLICE_214 ( input D1, C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );

  lut40061 \tuner/howLong/i3529_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40062 \tuner/howLong/i16_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40061 ( input A, B, C, D, output Z );

  LUT4 #("0x0001") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40062 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_howLong_SLICE_215 ( input D1, C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );

  lut40063 \tuner/howLong/i12_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40064 \tuner/howLong/i9_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40063 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40064 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_howLong_SLICE_217 ( input D0, C0, B0, A0, output F0 );

  lut40065 \tuner/howLong/i11_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40065 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module enabler_SLICE_219 ( input D0, C0, B0, A0, output F0 );

  lut40066 \enabler/i2302_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40066 ( input A, B, C, D, output Z );

  LUT4 #("0x1C38") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module enabler_SLICE_221 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40067 \enabler/i3386_2_lut_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40068 \enabler/i3392_2_lut_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40067 ( input A, B, C, D, output Z );

  LUT4 #("0xAD74") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40068 ( input A, B, C, D, output Z );

  LUT4 #("0xCD90") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F0_SLICE_222 ( input D1, C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40069 \enabler/i1_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40070 \aT2FT/t2F0/i948_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40069 ( input A, B, C, D, output Z );

  LUT4 #("0xFCF0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40070 ( input A, B, C, D, output Z );

  LUT4 #("0x5DE9") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F0_SLICE_224 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40071 \aT2FT/t2F0/i909_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40072 \aT2FT/t2F0/i969_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40071 ( input A, B, C, D, output Z );

  LUT4 #("0x1BD3") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40072 ( input A, B, C, D, output Z );

  LUT4 #("0x1DB4") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F3_SLICE_225 ( input D1, C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40073 \aT2FT/t2F3/i1980_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40074 \aT2FT/t2F3/i1276_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40073 ( input A, B, C, D, output Z );

  LUT4 #("0xFCCC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40074 ( input A, B, C, D, output Z );

  LUT4 #("0x1CDC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F3_SLICE_226 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40075 \aT2FT/t2F3/i3190_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40076 \aT2FT/t2F3/i529_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40075 ( input A, B, C, D, output Z );

  LUT4 #("0xDC34") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40076 ( input A, B, C, D, output Z );

  LUT4 #("0xF9FE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F3_SLICE_228 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40077 \aT2FT/t2F3/i564_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40078 \aT2FT/t2F3/i439_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40077 ( input A, B, C, D, output Z );

  LUT4 #("0x1E3E") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40078 ( input A, B, C, D, output Z );

  LUT4 #("0xE26B") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F3_SLICE_230 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40079 \aT2FT/t2F3/i550_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40080 \aT2FT/t2F3/i455_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40079 ( input A, B, C, D, output Z );

  LUT4 #("0x1508") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40080 ( input A, B, C, D, output Z );

  LUT4 #("0xAB90") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F3_SLICE_232 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40081 \aT2FT/t2F3/i528_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40082 \aT2FT/t2F3/i456_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40081 ( input A, B, C, D, output Z );

  LUT4 #("0x321A") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40082 ( input A, B, C, D, output Z );

  LUT4 #("0x1BD5") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F3_SLICE_234 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40083 \aT2FT/t2F3/i516_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40084 \aT2FT/t2F3/i471_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40083 ( input A, B, C, D, output Z );

  LUT4 #("0x358E") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40084 ( input A, B, C, D, output Z );

  LUT4 #("0xE17C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F3_SLICE_236 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40085 \aT2FT/t2F3/i515_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40086 \aT2FT/t2F3/i472_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40085 ( input A, B, C, D, output Z );

  LUT4 #("0xE34E") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40086 ( input A, B, C, D, output Z );

  LUT4 #("0x1BBD") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F3_SLICE_238 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40087 \aT2FT/t2F3/i495_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40088 \aT2FT/t2F3/i494_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40087 ( input A, B, C, D, output Z );

  LUT4 #("0x3BE9") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40088 ( input A, B, C, D, output Z );

  LUT4 #("0xF7AE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F2_SLICE_239 ( input D1, C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40069 \enabler/i3379_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40089 \aT2FT/t2F2/i1267_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40089 ( input A, B, C, D, output Z );

  LUT4 #("0x52F2") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F2_SLICE_240 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40090 \aT2FT/t2F2/i3187_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40091 \aT2FT/t2F2/i289_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40090 ( input A, B, C, D, output Z );

  LUT4 #("0xF41C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40091 ( input A, B, C, D, output Z );

  LUT4 #("0xA6CD") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F2_SLICE_242 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40092 \aT2FT/t2F2/i414_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40093 \aT2FT/t2F2/i305_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40092 ( input A, B, C, D, output Z );

  LUT4 #("0x1F5A") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40093 ( input A, B, C, D, output Z );

  LUT4 #("0xE1A2") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F2_SLICE_244 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40094 \aT2FT/t2F2/i400_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40095 \aT2FT/t2F2/i306_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40094 ( input A, B, C, D, output Z );

  LUT4 #("0x1520") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40095 ( input A, B, C, D, output Z );

  LUT4 #("0x4A77") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F2_SLICE_246 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40096 \aT2FT/t2F2/i378_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40097 \aT2FT/t2F2/i321_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40096 ( input A, B, C, D, output Z );

  LUT4 #("0x3252") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40097 ( input A, B, C, D, output Z );

  LUT4 #("0xB5D2") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F2_SLICE_248 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40098 \aT2FT/t2F2/i366_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40099 \aT2FT/t2F2/i379_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40098 ( input A, B, C, D, output Z );

  LUT4 #("0x583E") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40099 ( input A, B, C, D, output Z );

  LUT4 #("0xEDFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F2_SLICE_250 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40100 \aT2FT/t2F2/i365_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40101 \aT2FT/t2F2/i322_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40100 ( input A, B, C, D, output Z );

  LUT4 #("0xE52E") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40101 ( input A, B, C, D, output Z );

  LUT4 #("0x1DDB") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F2_SLICE_252 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40102 \aT2FT/t2F2/i345_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40103 \aT2FT/t2F2/i344_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40102 ( input A, B, C, D, output Z );

  LUT4 #("0x4EF9") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40103 ( input A, B, C, D, output Z );

  LUT4 #("0xDFF2") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F1_SLICE_253 ( input D1, C1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40104 \aT2FT/t2F1/i1959_2_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40074 \aT2FT/t2F1/i1258_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40104 ( input A, B, C, D, output Z );

  LUT4 #("0xF000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F1_SLICE_254 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40090 \aT2FT/t2F1/i3196_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40091 \aT2FT/t2F1/i139_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module aT2FT_t2F1_SLICE_256 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40105 \aT2FT/t2F1/i229_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40080 \aT2FT/t2F1/i155_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40105 ( input A, B, C, D, output Z );

  LUT4 #("0xFF9E") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F1_SLICE_258 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40077 \aT2FT/t2F1/i264_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40106 \aT2FT/t2F1/i156_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40106 ( input A, B, C, D, output Z );

  LUT4 #("0x1BD3") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F1_SLICE_260 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40079 \aT2FT/t2F1/i250_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40107 \aT2FT/t2F1/i171_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40107 ( input A, B, C, D, output Z );

  LUT4 #("0xB4D6") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F1_SLICE_262 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40108 \aT2FT/t2F1/i228_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40086 \aT2FT/t2F1/i172_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40108 ( input A, B, C, D, output Z );

  LUT4 #("0x0E26") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F1_SLICE_264 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40083 \aT2FT/t2F1/i216_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40109 \aT2FT/t2F1/i194_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40109 ( input A, B, C, D, output Z );

  LUT4 #("0xF7AE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F1_SLICE_266 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40085 \aT2FT/t2F1/i215_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40110 \aT2FT/t2F1/i195_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40110 ( input A, B, C, D, output Z );

  LUT4 #("0x4EF9") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F0_SLICE_268 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40111 \aT2FT/t2F0/i1285_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40112 \aT2FT/t2F0/i892_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40111 ( input A, B, C, D, output Z );

  LUT4 #("0x1ABA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40112 ( input A, B, C, D, output Z );

  LUT4 #("0xE62B") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F0_SLICE_270 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40113 \aT2FT/t2F0/i3193_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40114 \aT2FT/t2F0/i924_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40113 ( input A, B, C, D, output Z );

  LUT4 #("0xD3C4") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40114 ( input A, B, C, D, output Z );

  LUT4 #("0xBD46") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F0_SLICE_272 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40115 \aT2FT/t2F0/i1017_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40116 \aT2FT/t2F0/i925_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40115 ( input A, B, C, D, output Z );

  LUT4 #("0x13EE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40116 ( input A, B, C, D, output Z );

  LUT4 #("0x3E57") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F0_SLICE_274 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40117 \aT2FT/t2F0/i1003_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40088 \aT2FT/t2F0/i947_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40117 ( input A, B, C, D, output Z );

  LUT4 #("0x1508") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aT2FT_t2F0_SLICE_276 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40118 \aT2FT/t2F0/i982_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40119 \aT2FT/t2F0/i981_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40118 ( input A, B, C, D, output Z );

  LUT4 #("0xF9FE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40119 ( input A, B, C, D, output Z );

  LUT4 #("0x541C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aD2DT_d2d3_SLICE_277 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40120 \aD2DT/d2d3/i803_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40121 \aD2DT/d2d3/Mux_780_i7_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40120 ( input A, B, C, D, output Z );

  LUT4 #("0xD99B") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40121 ( input A, B, C, D, output Z );

  LUT4 #("0x4662") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aD2DT_d2d2_SLICE_279 ( input D1, C1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40122 \aD2DT/d2d2/i1929_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40123 \aD2DT/d2d2/Mux_679_i7_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40122 ( input A, B, C, D, output Z );

  LUT4 #("0xAAA0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40123 ( input A, B, C, D, output Z );

  LUT4 #("0x4662") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aD2DT_d2d2_SLICE_280 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40124 \aD2DT/d2d2/i702_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40125 \aD2DT/d2d2/i1923_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40124 ( input A, B, C, D, output Z );

  LUT4 #("0xD99B") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40125 ( input A, B, C, D, output Z );

  LUT4 #("0xA888") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aD2DT_d2d1_SLICE_281 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40126 \aD2DT/d2d1/i1791_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40127 \aD2DT/d2d1/Mux_578_i7_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40126 ( input A, B, C, D, output Z );

  LUT4 #("0xA888") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40127 ( input A, B, C, D, output Z );

  LUT4 #("0x2664") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module aD2DT_d2d1_SLICE_283 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40128 \aD2DT/d2d1/i1935_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40129 \aD2DT/d2d1/i601_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40128 ( input A, B, C, D, output Z );

  LUT4 #("0xEEEA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40129 ( input A, B, C, D, output Z );

  LUT4 #("0xD99B") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_285 ( input DI1, D1, C1, B1, A1, D0, C0, B0, A0, CLK, 
    output Q1, F0, F1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  lut40130 \tuner/mux_1240_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40131 \tuner/i3429_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/state_i3 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40130 ( input A, B, C, D, output Z );

  LUT4 #("0xF077") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40131 ( input A, B, C, D, output Z );

  LUT4 #("0x2000") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_286 ( input DI1, D1, C1, B1, A1, D0, C0, B0, CLK, output Q1, 
    F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  lut40132 \tuner/mux_1240_i1_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40133 \tuner.i3531_3_lut_4_lut_4_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/state_i1 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40132 ( input A, B, C, D, output Z );

  LUT4 #("0x141D") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40133 ( input A, B, C, D, output Z );

  LUT4 #("0x333C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_287 ( input DI1, D1, C1, B1, D0, C0, B0, LSR, CLK, output 
    Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, LSR_dly;

  lut40134 \tuner/i1319_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40135 \tuner/equal_52_i12_1_lut_2_lut_3_lut ( .A(GNDI), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  ffsre2 \tuner/state_i2 ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40134 ( input A, B, C, D, output Z );

  LUT4 #("0x3CF0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40135 ( input A, B, C, D, output Z );

  LUT4 #("0x0003") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_288 ( input DI1, D1, C1, B1, A1, D0, C0, B0, A0, CLK, output Q1, 
    F0, F1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  lut40136 i1_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40137 i13_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/stopCountFlag_c ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40136 ( input A, B, C, D, output Z );

  LUT4 #("0x8CAE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40137 ( input A, B, C, D, output Z );

  LUT4 #("0x0007") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_pitch_SLICE_297 ( input D0, C0, B0, A0, output F0 );

  lut40138 \tuner/pitch/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40138 ( input A, B, C, D, output Z );

  LUT4 #("0x7DBE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_pitch_SLICE_298 ( input D0, C0, B0, A0, output F0 );

  lut40139 \tuner/pitch/i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40139 ( input A, B, C, D, output Z );

  LUT4 #("0x7BDE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_pitch_SLICE_300 ( input D0, C0, B0, A0, output F0 );

  lut40053 \tuner/pitch/i11_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module tuner_pitch_SLICE_303 ( input D0, C0, B0, A0, output F0 );

  lut40140 \tuner/pitch/i3526_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40140 ( input A, B, C, D, output Z );

  LUT4 #("0x3337") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_pitch_SLICE_304 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40141 \tuner/pitch/i6_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40055 \tuner/pitch/i2_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40141 ( input A, B, C, D, output Z );

  LUT4 #("0x7DBE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_307 ( input DI1, D1, C1, B1, D0, C0, CLK, output Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  lut40142 \tuner/equal_52_i8_2_lut_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40143 \tuner/state_5__I_0_2_i7_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  ffsre2 \tuner/en_c ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40142 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFC") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40143 ( input A, B, C, D, output Z );

  LUT4 #("0xFFF0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_308 ( input DI1, D1, C1, B1, A1, C0, CLK, output Q1, F0, F1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly;

  lut40144 i1_4_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40145 \tuner/i1329_1_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  ffsre2 \tuner/makingMusic ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40144 ( input A, B, C, D, output Z );

  LUT4 #("0xCC5C") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40145 ( input A, B, C, D, output Z );

  LUT4 #("0x0F0F") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_309 ( input DI1, D1, C1, D0, C0, B0, A0, CE, LSR, CLK, 
    output Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  lut40146 \tuner/i106_2_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40147 \tuner/counter_1__I_0_i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  ffsre2 \tuner/counter__i1 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(LSR_dly), .Q(Q1));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module lut40146 ( input A, B, C, D, output Z );

  LUT4 #("0x0FF0") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40147 ( input A, B, C, D, output Z );

  LUT4 #("0x7DBE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_pitch_SLICE_311 ( input D0, C0, B0, A0, output F0 );

  lut40053 \tuner/pitch/i10_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module tuner_howLong_SLICE_312 ( input DI1, D1, C1, B1, A1, D0, C0, B0, A0, CE, 
    CLK, output Q1, F0, F1 );
  wire   GNDI, DI1_dly, CLK_dly, CE_dly;

  lut40148 \tuner/mux_62_i24_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40147 \tuner/howLong/i8_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/durThreshold_i0_i23 ( .D0(DI1_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40148 ( input A, B, C, D, output Z );

  LUT4 #("0x30AA") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_howLong_SLICE_313 ( input D1, C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );

  lut40149 \tuner/howLong/i6_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40057 \tuner/howLong/i4_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40149 ( input A, B, C, D, output Z );

  LUT4 #("0x7BDE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_howLong_SLICE_315 ( input DI1, D1, C1, B1, A1, D0, C0, B0, A0, 
    CLK, output Q1, F0, F1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  lut40150 \tuner.howLong.SLICE_315_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40151 \tuner/howLong/i10_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  ffsre2 \tuner/howLong/clkStrobe ( .D0(DI1_dly), .SP(VCCI), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
  endspecify

endmodule

module lut40150 ( input A, B, C, D, output Z );

  LUT4 #("0x0001") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module lut40151 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFE") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module SLICE_318 ( output F0 );
  wire   GNDI;

  lut40152 i3807( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module lut40152 ( input A, B, C, D, output Z );

  LUT4 #("0xFFFF") INST10( .A(A), .B(B), .C(C), .D(D), .Z(Z));
endmodule

module tuner_SLICE_319 ( input D0, output F0 );
  wire   GNDI;

  lut40020 \tuner.i1317_2_lut ( .A(GNDI), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module hf_osc ( input CLKHFPU, CLKHFEN, output CLKHF );
  wire   GNDI;

  HSOSC_CORE_B hf_osc( .CLKHFPU(CLKHFPU), .CLKHFEN(CLKHFEN), .TRIM9(GNDI), 
    .TRIM8(GNDI), .TRIM7(GNDI), .TRIM6(GNDI), .TRIM5(GNDI), .TRIM4(GNDI), 
    .TRIM3(GNDI), .TRIM2(GNDI), .TRIM1(GNDI), .TRIM0(GNDI), .CLKHF(CLKHF));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module HSOSC_CORE_B ( input CLKHFPU, CLKHFEN, TRIM9, TRIM8, TRIM7, TRIM6, 
    TRIM5, TRIM4, TRIM3, TRIM2, TRIM1, TRIM0, output CLKHF );

  HSOSC_CORE INST10( .CLKHFPU(CLKHFPU), .CLKHFEN(CLKHFEN), .TRIM9(TRIM9), 
    .TRIM8(TRIM8), .TRIM7(TRIM7), .TRIM6(TRIM6), .TRIM5(TRIM5), .TRIM4(TRIM4), 
    .TRIM3(TRIM3), .TRIM2(TRIM2), .TRIM1(TRIM1), .TRIM0(TRIM0), .CLKHF(CLKHF));
  defparam INST10.CLKHF_DIV = "0b01";
  defparam INST10.FABRIC_TRIME = "DISABLE";
endmodule

module spi_newFlattenedMCUout_i0 ( input PADDI, INCLK, output DI0 );
  wire   GNDI, VCCI, PADDI_dly, INCLK_dly;

  IOL_B_B \spi/newFlattenedMCUout_i0 ( .PADDI(PADDI_dly), .DO1(GNDI), 
    .DO0(GNDI), .CE(VCCI), .IOLTO(GNDI), .HOLD(GNDI), .INCLK(INCLK_dly), 
    .OUTCLK(GNDI), .PADDO(), .PADDT(), .DI1(), .DI0(DI0));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (INCLK => DI0) = (0:0:0,0:0:0);
    $setuphold (posedge INCLK, PADDI, 0:0:0, 0:0:0,,,, INCLK_dly, PADDI_dly);
  endspecify

endmodule

module IOL_B_B ( input PADDI, DO1, DO0, CE, IOLTO, HOLD, INCLK, OUTCLK, 
    output PADDO, PADDT, DI1, DI0 );

  IOL_B INST10( .PADDI(PADDI), .DO1(DO1), .DO0(DO0), .CE(CE), .IOLTO(IOLTO), 
    .HOLD(HOLD), .INCLK(INCLK), .OUTCLK(OUTCLK), .PADDO(PADDO), .PADDT(PADDT), 
    .DI1(DI1), .DI0(DI0));
  defparam INST10.LATCHIN = "NONE_REG";
  defparam INST10.DDROUT = "NO";
endmodule

module ce ( output PADDI, input ce );
  wire   GNDI;

  BB_B_B \ce_pad.bb_inst ( .T_N(GNDI), .I(GNDI), .O(PADDI), .B(ce));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (ce => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule

module BB_B_B ( input T_N, I, output O, inout B );

  BB_B INST10( .T_N(T_N), .I(I), .O(O), .B(B));
endmodule

module sdi ( output PADDI, input sdi );
  wire   GNDI;

  BB_B_B \sdi_pad.bb_inst ( .T_N(GNDI), .I(GNDI), .O(PADDI), .B(sdi));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (sdi => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule

module sck ( output PADDI, input sck );
  wire   GNDI;

  BB_B_B \sck_pad.bb_inst ( .T_N(GNDI), .I(GNDI), .O(PADDI), .B(sck));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (sck => PADDI) = (0:0:0,0:0:0);
  endspecify

endmodule

module makingMusic ( input PADDO, output makingMusic );
  wire   VCCI;

  BB_B_B \makingMusic_pad.bb_inst ( .T_N(VCCI), .I(PADDO), .O(), 
    .B(makingMusic));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => makingMusic) = (0:0:0,0:0:0);
  endspecify

endmodule

module pwm ( input PADDO, output pwm );
  wire   VCCI;

  BB_B_B \pwm_pad.bb_inst ( .T_N(VCCI), .I(PADDO), .O(), .B(pwm));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (PADDO => pwm) = (0:0:0,0:0:0);
  endspecify

endmodule
